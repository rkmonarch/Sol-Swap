{"version":3,"file":"updateNft.cjs","sources":["../../../../../src/plugins/nftModule/operations/updateNft.ts"],"sourcesContent":["import {\n  createUpdateMetadataAccountV2Instruction,\n  UpdateMetadataAccountArgsV2,\n  Uses,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey } from '@solana/web3.js';\nimport isEqual from 'lodash.isequal';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Sft } from '../models';\nimport { Option, TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  CreatorInput,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\nimport { NoInstructionsToSendError } from '@/errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UpdateNftOperation' as const;\n\n/**\n * Updates an existing NFT or SFT.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .update({ nftOrSft, name: \"My new NFT name\" };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const updateNftOperation = useOperation<UpdateNftOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type UpdateNftOperation = Operation<\n  typeof Key,\n  UpdateNftInput,\n  UpdateNftOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type UpdateNftInput = {\n  /**\n   * The NFT or SFT to update.\n   * We only need a subset of the `Sft` (or `Nft`) model to figure out\n   * the current values for the data of the metadata account and only update\n   * the parts that are different.\n   */\n  nftOrSft: Pick<\n    Sft,\n    | 'address'\n    | 'collection'\n    | 'creators'\n    | 'name'\n    | 'symbol'\n    | 'uri'\n    | 'sellerFeeBasisPoints'\n    | 'uses'\n  >;\n\n  /**\n   * The current update authority of the asset as a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  updateAuthority?: Signer;\n\n  /**\n   * The address of the new update authority to set for the asset\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  newUpdateAuthority?: PublicKey;\n\n  /**\n   * The new on-chain name of the asset.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  name?: string;\n\n  /**\n   * The new on-chain symbol of the asset.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  symbol?: string;\n\n  /**\n   * The new on-chain uri of the asset.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  uri?: string;\n\n  /**\n   * The new royalties of the asset in percent basis point\n   * (i.e. 250 is 2.5%) that should be paid to the creators\n   * on each secondary sale.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  sellerFeeBasisPoints?: number;\n\n  /**\n   * The new creators for the asset.\n   * For each creator, if an `authority` Signer is provided,\n   * the creator will be marked as verified.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  creators?: CreatorInput[];\n\n  /**\n   * Whether or not the asset has already been sold to its first buyer.\n   * This can only be flipped from `false` to `true`.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  primarySaleHappened?: boolean;\n\n  /**\n   * Whether or not the asset is mutable.\n   * When set to `false` no one can update the Metadata account,\n   * not even the update authority.\n   * This can only be flipped from `true` to `false`.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  isMutable?: boolean;\n\n  /**\n   * When this field is not `null`, it indicates that the asset\n   * can be \"used\" by its owner or any approved \"use authorities\".\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  uses?: Option<Uses>;\n\n  /**\n   * The new Collection NFT that this asset belongs to.\n   * When `null`, this will remove the asset from its current collection.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  collection?: Option<PublicKey>;\n\n  /**\n   * The collection authority that should sign the asset\n   * to prove that it is part of the newly provided collection.\n   * When `null`, the provided `collection` will not be verified.\n   *\n   * @defaultValue `null`\n   */\n  collectionAuthority?: Option<Signer>;\n\n  /**\n   * Whether or not the provided `collectionAuthority` is a delegated\n   * collection authority, i.e. it was approved by the update authority\n   * using `metaplex.nfts().approveCollectionAuthority()`.\n   *\n   * @defaultValue `false`\n   */\n  collectionAuthorityIsDelegated?: boolean;\n\n  /**\n   * Whether or not the newly provided `collection` is a sized collection\n   * and not a legacy collection.\n   *\n   * @defaultValue `true`\n   */\n  collectionIsSized?: boolean;\n\n  /**\n   * The authority of the asset's current collection.\n   * This may be required if the current collection is being removed\n   * or updated and needs to be unverified before doing so.\n   *\n   * @defaultValue `updateAuthority`\n   */\n  oldCollectionAuthority?: Signer;\n\n  /**\n   * Whether or not the asset's current collection is a sized collection\n   * and not a legacy collection.\n   *\n   * @defaultValue `true`\n   */\n  oldCollectionIsSized?: boolean;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type UpdateNftOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const updateNftOperationHandler: OperationHandler<UpdateNftOperation> = {\n  handle: async (\n    operation: UpdateNftOperation,\n    metaplex: Metaplex,\n    scope: OperationScope\n  ): Promise<UpdateNftOutput> => {\n    const builder = updateNftBuilder(metaplex, operation.input, scope);\n\n    if (builder.isEmpty()) {\n      throw new NoInstructionsToSendError(Key);\n    }\n\n    return builder.sendAndConfirm(metaplex, scope.confirmOptions);\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type UpdateNftBuilderParams = Omit<UpdateNftInput, 'confirmOptions'> & {\n  /** A key to distinguish the instruction that updates the metadata account. */\n  updateMetadataInstructionKey?: string;\n};\n\n/**\n * Updates an existing NFT or SFT.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .update({ nftOrSft, name: \"My new NFT name\" });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const updateNftBuilder = (\n  metaplex: Metaplex,\n  params: UpdateNftBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { nftOrSft, updateAuthority = metaplex.identity() } = params;\n\n  // Programs.\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n\n  const updateInstructionDataWithoutChanges = toInstructionData(nftOrSft);\n  const updateInstructionData = toInstructionData(nftOrSft, params);\n  const shouldSendUpdateInstruction = !isEqual(\n    updateInstructionData,\n    updateInstructionDataWithoutChanges\n  );\n\n  const isRemovingVerifiedCollection =\n    !!nftOrSft.collection &&\n    !!nftOrSft.collection.verified &&\n    params.collection === null;\n  const isOverridingVerifiedCollection =\n    !!nftOrSft.collection &&\n    !!nftOrSft.collection.verified &&\n    !!params.collection &&\n    !params.collection.equals(nftOrSft.collection.address);\n  const shouldUnverifyCurrentCollection =\n    isRemovingVerifiedCollection || isOverridingVerifiedCollection;\n\n  const creatorsInput: CreatorInput[] = params.creators ?? nftOrSft.creators;\n  const verifyAdditionalCreatorInstructions = creatorsInput\n    .filter((creator) => {\n      const currentCreator = nftOrSft.creators.find(({ address }) =>\n        address.equals(creator.address)\n      );\n      const currentlyVerified = currentCreator?.verified ?? false;\n      return !!creator.authority && !currentlyVerified;\n    })\n    .map((creator) => {\n      return metaplex.nfts().builders().verifyCreator(\n        {\n          mintAddress: nftOrSft.address,\n          creator: creator.authority,\n        },\n        { payer, programs }\n      );\n    });\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Unverify current collection before overriding it.\n      // Otherwise, the previous collection size will not be properly decremented.\n      .when(shouldUnverifyCurrentCollection, (builder) =>\n        builder.add(\n          metaplex\n            .nfts()\n            .builders()\n            .unverifyCollection(\n              {\n                mintAddress: nftOrSft.address,\n                collectionMintAddress: nftOrSft.collection\n                  ?.address as PublicKey,\n                collectionAuthority:\n                  params.oldCollectionAuthority ?? updateAuthority,\n                isSizedCollection: params.oldCollectionIsSized ?? true,\n              },\n              { programs, payer }\n            )\n        )\n      )\n\n      // Update the metadata account.\n      .when(shouldSendUpdateInstruction, (builder) =>\n        builder.add({\n          instruction: createUpdateMetadataAccountV2Instruction(\n            {\n              metadata: metaplex.nfts().pdas().metadata({\n                mint: nftOrSft.address,\n                programs,\n              }),\n              updateAuthority: updateAuthority.publicKey,\n            },\n            { updateMetadataAccountArgsV2: updateInstructionData },\n            tokenMetadataProgram.address\n          ),\n          signers: [updateAuthority],\n          key: params.updateMetadataInstructionKey ?? 'updateMetadata',\n        })\n      )\n\n      // Verify additional creators.\n      .add(...verifyAdditionalCreatorInstructions)\n\n      // Verify collection.\n      .when(!!params.collection && !!params.collectionAuthority, (builder) =>\n        builder.add(\n          metaplex\n            .nfts()\n            .builders()\n            .verifyCollection(\n              {\n                mintAddress: nftOrSft.address,\n                collectionMintAddress: params.collection as PublicKey,\n                collectionAuthority: params.collectionAuthority as Signer,\n                isDelegated: params.collectionAuthorityIsDelegated ?? false,\n                isSizedCollection: params.collectionIsSized ?? true,\n              },\n              { programs, payer }\n            )\n        )\n      )\n  );\n};\n\nconst toInstructionData = (\n  nftOrSft: Pick<\n    Sft,\n    | 'address'\n    | 'collection'\n    | 'creators'\n    | 'name'\n    | 'symbol'\n    | 'uri'\n    | 'sellerFeeBasisPoints'\n    | 'uses'\n  >,\n  input: Partial<UpdateNftInput> = {}\n): UpdateMetadataAccountArgsV2 => {\n  const creators =\n    input.creators === undefined\n      ? nftOrSft.creators\n      : input.creators.map((creator) => {\n          const currentCreator = nftOrSft.creators.find(({ address }) =>\n            address.equals(creator.address)\n          );\n          return {\n            ...creator,\n            verified: currentCreator?.verified ?? false,\n          };\n        });\n\n  const currentCollection = nftOrSft.collection\n    ? { ...nftOrSft.collection, key: nftOrSft.collection.address }\n    : null;\n  const newCollection = input.collection\n    ? { key: input.collection, verified: false }\n    : null;\n\n  return {\n    updateAuthority: input.newUpdateAuthority ?? null,\n    primarySaleHappened: input.primarySaleHappened ?? null,\n    isMutable: input.isMutable ?? null,\n    data: {\n      name: input.name ?? nftOrSft.name,\n      symbol: input.symbol ?? nftOrSft.symbol,\n      uri: input.uri ?? nftOrSft.uri,\n      sellerFeeBasisPoints:\n        input.sellerFeeBasisPoints ?? nftOrSft.sellerFeeBasisPoints,\n      creators: creators.length > 0 ? creators : null,\n      uses: input.uses === undefined ? nftOrSft.uses : input.uses,\n      collection:\n        input.collection === undefined ? currentCollection : newCollection,\n    },\n  };\n};\n"],"names":["Key","updateNftOperation","useOperation","updateNftOperationHandler","handle","operation","metaplex","scope","builder","updateNftBuilder","input","isEmpty","NoInstructionsToSendError","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","nftOrSft","updateAuthority","identity","tokenMetadataProgram","getTokenMetadata","updateInstructionDataWithoutChanges","toInstructionData","updateInstructionData","shouldSendUpdateInstruction","isEqual","isRemovingVerifiedCollection","collection","verified","isOverridingVerifiedCollection","equals","address","shouldUnverifyCurrentCollection","creatorsInput","creators","verifyAdditionalCreatorInstructions","filter","creator","currentCreator","find","currentlyVerified","authority","map","nfts","builders","verifyCreator","mintAddress","TransactionBuilder","make","setFeePayer","when","add","unverifyCollection","collectionMintAddress","collectionAuthority","oldCollectionAuthority","isSizedCollection","oldCollectionIsSized","instruction","createUpdateMetadataAccountV2Instruction","metadata","pdas","mint","publicKey","updateMetadataAccountArgsV2","signers","key","updateMetadataInstructionKey","verifyCollection","isDelegated","collectionAuthorityIsDelegated","collectionIsSized","undefined","currentCollection","newCollection","newUpdateAuthority","primarySaleHappened","isMutable","data","name","symbol","uri","sellerFeeBasisPoints","length","uses"],"mappings":"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"}