'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.cjs');
var MetaplexError = require('./MetaplexError.cjs');

/** @group Errors */
class BundlrError extends MetaplexError.MetaplexError {
  constructor(message, cause) {
    super(message, 'plugin', 'Bundlr', cause);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'BundlrError');
  }
}

/** @group Errors */
class FailedToInitializeBundlrError extends BundlrError {
  constructor(cause) {
    const message = 'Bundlr could not be initialized. ' + 'Please check the underlying error below for more details.';
    super(message, cause);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'FailedToInitializeBundlrError');
  }
}

/** @group Errors */
class FailedToConnectToBundlrAddressError extends BundlrError {
  constructor(address, cause) {
    const message = `Bundlr could not connect to the provided address [${address}]. ` + 'Please ensure the provided address is valid. Some valid addresses include: ' + '"https://node1.bundlr.network" for mainnet and "https://devnet.bundlr.network" for devnet';
    super(message, cause);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'FailedToConnectToBundlrAddressError');
  }
}

/** @group Errors */
class AssetUploadFailedError extends BundlrError {
  constructor(status) {
    const message = `The asset could not be uploaded to the Bundlr network and ` + `returned the following status code [${status}].`;
    super(message);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'AssetUploadFailedError');
  }
}

/** @group Errors */
class BundlrWithdrawError extends BundlrError {
  constructor(status) {
    const message = `The balance could not be withdrawn from the Bundlr network and ` + `returned the following status code [${status}].`;
    super(message);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'BundlrWithdrawError');
  }
}

exports.AssetUploadFailedError = AssetUploadFailedError;
exports.BundlrError = BundlrError;
exports.BundlrWithdrawError = BundlrWithdrawError;
exports.FailedToConnectToBundlrAddressError = FailedToConnectToBundlrAddressError;
exports.FailedToInitializeBundlrError = FailedToInitializeBundlrError;
//# sourceMappingURL=BundlrError.cjs.map
