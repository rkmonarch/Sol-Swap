import type { ContractType, NetworkInput, PrebuiltContractType } from "../core/types";
import { Abi } from "../schema/contracts/custom";
import { ThirdwebStorage } from "@thirdweb-dev/storage";
import { ethers } from "ethers";
export declare const EditionDropInitializer: {
    name: "DropERC1155";
    contractType: "edition-drop";
    schema: {
        deploy: import("zod").ZodObject<{
            symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                data?: any;
                name: string;
            }, {
                data?: any;
                name: string;
            }>]>, import("zod").ZodString]>>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            primary_sale_recipient: import("zod").ZodEffects<import("zod").ZodString, string, string>;
            trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            symbol: string;
            name: string;
            seller_fee_basis_points: number;
            fee_recipient: string;
            merkle: Record<string, string>;
            platform_fee_basis_points: number;
            platform_fee_recipient: string;
            primary_sale_recipient: string;
            trusted_forwarders: string[];
        }, {
            symbol?: string | undefined;
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            seller_fee_basis_points?: number | undefined;
            fee_recipient?: string | undefined;
            merkle?: Record<string, string> | undefined;
            platform_fee_basis_points?: number | undefined;
            platform_fee_recipient?: string | undefined;
            trusted_forwarders?: string[] | undefined;
            name: string;
            primary_sale_recipient: string;
        }>;
        output: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodString>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: string | undefined;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            symbol: string;
            name: string;
            seller_fee_basis_points: number;
            fee_recipient: string;
            merkle: Record<string, string>;
        }, {
            symbol?: string | undefined;
            description?: string | undefined;
            image?: string | undefined;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            seller_fee_basis_points?: number | undefined;
            fee_recipient?: string | undefined;
            merkle?: Record<string, string> | undefined;
            name: string;
        }>;
        input: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                data?: any;
                name: string;
            }, {
                data?: any;
                name: string;
            }>]>, import("zod").ZodString]>>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            symbol: string;
            name: string;
            seller_fee_basis_points: number;
            fee_recipient: string;
            merkle: Record<string, string>;
        }, {
            symbol?: string | undefined;
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            seller_fee_basis_points?: number | undefined;
            fee_recipient?: string | undefined;
            merkle?: Record<string, string> | undefined;
            name: string;
        }>;
    };
    roles: readonly ["admin", "minter", "transfer"];
    initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
        supportedChains?: {
            chainId: number;
            slug: string;
            rpc: string[];
            nativeCurrency: {
                symbol: string;
                name: string;
                decimals: number;
            };
        }[] | undefined;
        thirdwebApiKey?: string | undefined;
        alchemyApiKey?: string | undefined;
        infuraApiKey?: string | undefined;
        readonlySettings?: {
            chainId?: number | undefined;
            rpcUrl: string;
        } | undefined;
        gasSettings?: {
            maxPriceInGwei?: number | undefined;
            speed?: "standard" | "fast" | "fastest" | undefined;
        } | undefined;
        gasless?: {
            experimentalChainlessSupport?: boolean | undefined;
            openzeppelin: {
                relayerForwarderAddress?: string | undefined;
                useEOAForwarder?: boolean | undefined;
                relayerUrl: string;
            };
        } | {
            biconomy: {
                deadlineSeconds?: number | undefined;
                apiId: string;
                apiKey: string;
            };
        } | undefined;
        gatewayUrls?: string[] | undefined;
    } | undefined) => Promise<import("./prebuilt-implementations/edition-drop").EditionDrop>;
    getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
        [x: string]: any;
        name?: string | undefined;
        inputs?: {
            [x: string]: any;
            stateMutability?: string | undefined;
            components?: {
                [x: string]: any;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
            name: string;
        }[] | undefined;
        outputs?: {
            [x: string]: any;
            stateMutability?: string | undefined;
            components?: {
                [x: string]: any;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
            name: string;
        }[] | undefined;
        type: string;
    }[] | ({
        inputs: never[];
        stateMutability: string;
        type: string;
        name?: undefined;
        anonymous?: undefined;
        outputs?: undefined;
    } | {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        type: string;
        stateMutability?: undefined;
        anonymous?: undefined;
        outputs?: undefined;
    } | {
        anonymous: boolean;
        inputs: ({
            indexed: boolean;
            internalType: string;
            name: string;
            type: string;
            components?: undefined;
        } | {
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            indexed: boolean;
            internalType: string;
            name: string;
            type: string;
        })[];
        name: string;
        type: string;
        stateMutability?: undefined;
        outputs?: undefined;
    } | {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: {
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
    } | {
        inputs: ({
            internalType: string;
            name: string;
            type: string;
            components?: undefined;
        } | {
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            internalType: string;
            name: string;
            type: string;
        })[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
    })[] | ({
        inputs: never[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
        name?: undefined;
        outputs?: undefined;
    } | {
        anonymous: boolean;
        inputs: ({
            indexed: boolean;
            internalType: string;
            name: string;
            type: string;
            components?: undefined;
        } | {
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            indexed: boolean;
            internalType: string;
            name: string;
            type: string;
        })[];
        name: string;
        type: string;
        stateMutability?: undefined;
        outputs?: undefined;
    } | {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
    } | {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: {
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
    } | {
        inputs: ({
            internalType: string;
            name: string;
            type: string;
            components?: undefined;
        } | {
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            internalType: string;
            name: string;
            type: string;
        })[];
        name: string;
        outputs: never[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
    })[]>;
};
export declare const EditionInitializer: {
    name: "TokenERC1155";
    contractType: "edition";
    schema: {
        deploy: import("zod").ZodObject<{
            symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                data?: any;
                name: string;
            }, {
                data?: any;
                name: string;
            }>]>, import("zod").ZodString]>>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            primary_sale_recipient: import("zod").ZodEffects<import("zod").ZodString, string, string>;
            trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            symbol: string;
            name: string;
            seller_fee_basis_points: number;
            fee_recipient: string;
            platform_fee_basis_points: number;
            platform_fee_recipient: string;
            primary_sale_recipient: string;
            trusted_forwarders: string[];
        }, {
            symbol?: string | undefined;
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            seller_fee_basis_points?: number | undefined;
            fee_recipient?: string | undefined;
            platform_fee_basis_points?: number | undefined;
            platform_fee_recipient?: string | undefined;
            trusted_forwarders?: string[] | undefined;
            name: string;
            primary_sale_recipient: string;
        }>;
        output: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodString>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: string | undefined;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            symbol: string;
            name: string;
            seller_fee_basis_points: number;
            fee_recipient: string;
        }, {
            symbol?: string | undefined;
            description?: string | undefined;
            image?: string | undefined;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            seller_fee_basis_points?: number | undefined;
            fee_recipient?: string | undefined;
            name: string;
        }>;
        input: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                data?: any;
                name: string;
            }, {
                data?: any;
                name: string;
            }>]>, import("zod").ZodString]>>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            symbol: string;
            name: string;
            seller_fee_basis_points: number;
            fee_recipient: string;
        }, {
            symbol?: string | undefined;
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            seller_fee_basis_points?: number | undefined;
            fee_recipient?: string | undefined;
            name: string;
        }>;
    };
    roles: readonly ["admin", "minter", "transfer"];
    initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
        supportedChains?: {
            chainId: number;
            slug: string;
            rpc: string[];
            nativeCurrency: {
                symbol: string;
                name: string;
                decimals: number;
            };
        }[] | undefined;
        thirdwebApiKey?: string | undefined;
        alchemyApiKey?: string | undefined;
        infuraApiKey?: string | undefined;
        readonlySettings?: {
            chainId?: number | undefined;
            rpcUrl: string;
        } | undefined;
        gasSettings?: {
            maxPriceInGwei?: number | undefined;
            speed?: "standard" | "fast" | "fastest" | undefined;
        } | undefined;
        gasless?: {
            experimentalChainlessSupport?: boolean | undefined;
            openzeppelin: {
                relayerForwarderAddress?: string | undefined;
                useEOAForwarder?: boolean | undefined;
                relayerUrl: string;
            };
        } | {
            biconomy: {
                deadlineSeconds?: number | undefined;
                apiId: string;
                apiKey: string;
            };
        } | undefined;
        gatewayUrls?: string[] | undefined;
    } | undefined) => Promise<import("./prebuilt-implementations/edition").Edition>;
    getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
        [x: string]: any;
        name?: string | undefined;
        inputs?: {
            [x: string]: any;
            stateMutability?: string | undefined;
            components?: {
                [x: string]: any;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
            name: string;
        }[] | undefined;
        outputs?: {
            [x: string]: any;
            stateMutability?: string | undefined;
            components?: {
                [x: string]: any;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
            name: string;
        }[] | undefined;
        type: string;
    }[] | ({
        inputs: never[];
        stateMutability: string;
        type: string;
        name?: undefined;
        anonymous?: undefined;
        outputs?: undefined;
    } | {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        type: string;
        stateMutability?: undefined;
        anonymous?: undefined;
        outputs?: undefined;
    } | {
        anonymous: boolean;
        inputs: ({
            indexed: boolean;
            internalType: string;
            name: string;
            type: string;
            components?: undefined;
        } | {
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            indexed: boolean;
            internalType: string;
            name: string;
            type: string;
        })[];
        name: string;
        type: string;
        stateMutability?: undefined;
        outputs?: undefined;
    } | {
        inputs: ({
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            internalType: string;
            name: string;
            type: string;
        } | {
            internalType: string;
            name: string;
            type: string;
            components?: undefined;
        })[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
    })[]>;
};
export declare const MarketplaceInitializer: {
    name: "Marketplace";
    contractType: "marketplace";
    schema: {
        deploy: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                data?: any;
                name: string;
            }, {
                data?: any;
                name: string;
            }>]>, import("zod").ZodString]>>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            name: string;
            platform_fee_basis_points: number;
            platform_fee_recipient: string;
            trusted_forwarders: string[];
        }, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            platform_fee_basis_points?: number | undefined;
            platform_fee_recipient?: string | undefined;
            trusted_forwarders?: string[] | undefined;
            name: string;
        }>;
        output: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodString>;
        }, "strip", import("zod").ZodUnknown, {
            [x: string]: unknown;
            description?: string | undefined;
            image?: string | undefined;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            name: string;
        }, {
            [x: string]: unknown;
            description?: string | undefined;
            image?: string | undefined;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            name: string;
        }>;
        input: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                data?: any;
                name: string;
            }, {
                data?: any;
                name: string;
            }>]>, import("zod").ZodString]>>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            name: string;
        }, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            name: string;
        }>;
    };
    roles: readonly ["admin", "lister", "asset"];
    initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
        supportedChains?: {
            chainId: number;
            slug: string;
            rpc: string[];
            nativeCurrency: {
                symbol: string;
                name: string;
                decimals: number;
            };
        }[] | undefined;
        thirdwebApiKey?: string | undefined;
        alchemyApiKey?: string | undefined;
        infuraApiKey?: string | undefined;
        readonlySettings?: {
            chainId?: number | undefined;
            rpcUrl: string;
        } | undefined;
        gasSettings?: {
            maxPriceInGwei?: number | undefined;
            speed?: "standard" | "fast" | "fastest" | undefined;
        } | undefined;
        gasless?: {
            experimentalChainlessSupport?: boolean | undefined;
            openzeppelin: {
                relayerForwarderAddress?: string | undefined;
                useEOAForwarder?: boolean | undefined;
                relayerUrl: string;
            };
        } | {
            biconomy: {
                deadlineSeconds?: number | undefined;
                apiId: string;
                apiKey: string;
            };
        } | undefined;
        gatewayUrls?: string[] | undefined;
    } | undefined) => Promise<import("./prebuilt-implementations/marketplace").Marketplace>;
    getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
        [x: string]: any;
        name?: string | undefined;
        inputs?: {
            [x: string]: any;
            stateMutability?: string | undefined;
            components?: {
                [x: string]: any;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
            name: string;
        }[] | undefined;
        outputs?: {
            [x: string]: any;
            stateMutability?: string | undefined;
            components?: {
                [x: string]: any;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
            name: string;
        }[] | undefined;
        type: string;
    }[] | ({
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
        name?: undefined;
        outputs?: undefined;
    } | {
        anonymous: boolean;
        inputs: ({
            indexed: boolean;
            internalType: string;
            name: string;
            type: string;
            components?: undefined;
        } | {
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            indexed: boolean;
            internalType: string;
            name: string;
            type: string;
        })[];
        name: string;
        type: string;
        stateMutability?: undefined;
        outputs?: undefined;
    } | {
        inputs: {
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: never[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
    } | {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
    } | {
        stateMutability: string;
        type: string;
        inputs?: undefined;
        anonymous?: undefined;
        name?: undefined;
        outputs?: undefined;
    })[]>;
};
export declare const MarketplaceV3Initializer: {
    name: "MarketplaceRouter";
    contractType: "marketplace-v3";
    schema: {
        deploy: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                data?: any;
                name: string;
            }, {
                data?: any;
                name: string;
            }>]>, import("zod").ZodString]>>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            name: string;
            platform_fee_basis_points: number;
            platform_fee_recipient: string;
            trusted_forwarders: string[];
        }, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            platform_fee_basis_points?: number | undefined;
            platform_fee_recipient?: string | undefined;
            trusted_forwarders?: string[] | undefined;
            name: string;
        }>;
        output: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodString>;
        }, "strip", import("zod").ZodUnknown, {
            [x: string]: unknown;
            description?: string | undefined;
            image?: string | undefined;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            name: string;
        }, {
            [x: string]: unknown;
            description?: string | undefined;
            image?: string | undefined;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            name: string;
        }>;
        input: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                data?: any;
                name: string;
            }, {
                data?: any;
                name: string;
            }>]>, import("zod").ZodString]>>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            name: string;
        }, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            name: string;
        }>;
    };
    roles: readonly ["admin", "lister", "asset"];
    initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
        supportedChains?: {
            chainId: number;
            slug: string;
            rpc: string[];
            nativeCurrency: {
                symbol: string;
                name: string;
                decimals: number;
            };
        }[] | undefined;
        thirdwebApiKey?: string | undefined;
        alchemyApiKey?: string | undefined;
        infuraApiKey?: string | undefined;
        readonlySettings?: {
            chainId?: number | undefined;
            rpcUrl: string;
        } | undefined;
        gasSettings?: {
            maxPriceInGwei?: number | undefined;
            speed?: "standard" | "fast" | "fastest" | undefined;
        } | undefined;
        gasless?: {
            experimentalChainlessSupport?: boolean | undefined;
            openzeppelin: {
                relayerForwarderAddress?: string | undefined;
                useEOAForwarder?: boolean | undefined;
                relayerUrl: string;
            };
        } | {
            biconomy: {
                deadlineSeconds?: number | undefined;
                apiId: string;
                apiKey: string;
            };
        } | undefined;
        gatewayUrls?: string[] | undefined;
    } | undefined) => Promise<import("./prebuilt-implementations/marketplacev3").MarketplaceV3>;
    getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
        [x: string]: any;
        name?: string | undefined;
        inputs?: {
            [x: string]: any;
            stateMutability?: string | undefined;
            components?: {
                [x: string]: any;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
            name: string;
        }[] | undefined;
        outputs?: {
            [x: string]: any;
            stateMutability?: string | undefined;
            components?: {
                [x: string]: any;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
            name: string;
        }[] | undefined;
        type: string;
    }[]>;
};
export declare const MultiwrapInitializer: {
    name: "Multiwrap";
    contractType: "multiwrap";
    schema: {
        deploy: import("zod").ZodObject<{
            symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                data?: any;
                name: string;
            }, {
                data?: any;
                name: string;
            }>]>, import("zod").ZodString]>>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            symbol: string;
            name: string;
            seller_fee_basis_points: number;
            fee_recipient: string;
            trusted_forwarders: string[];
        }, {
            symbol?: string | undefined;
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            seller_fee_basis_points?: number | undefined;
            fee_recipient?: string | undefined;
            trusted_forwarders?: string[] | undefined;
            name: string;
        }>;
        output: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodString>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: string | undefined;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            symbol: string;
            name: string;
            seller_fee_basis_points: number;
            fee_recipient: string;
        }, {
            symbol?: string | undefined;
            description?: string | undefined;
            image?: string | undefined;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            seller_fee_basis_points?: number | undefined;
            fee_recipient?: string | undefined;
            name: string;
        }>;
        input: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                data?: any;
                name: string;
            }, {
                data?: any;
                name: string;
            }>]>, import("zod").ZodString]>>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            symbol: string;
            name: string;
            seller_fee_basis_points: number;
            fee_recipient: string;
        }, {
            symbol?: string | undefined;
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            seller_fee_basis_points?: number | undefined;
            fee_recipient?: string | undefined;
            name: string;
        }>;
    };
    roles: readonly ["admin", "transfer", "minter", "unwrap", "asset"];
    initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
        supportedChains?: {
            chainId: number;
            slug: string;
            rpc: string[];
            nativeCurrency: {
                symbol: string;
                name: string;
                decimals: number;
            };
        }[] | undefined;
        thirdwebApiKey?: string | undefined;
        alchemyApiKey?: string | undefined;
        infuraApiKey?: string | undefined;
        readonlySettings?: {
            chainId?: number | undefined;
            rpcUrl: string;
        } | undefined;
        gasSettings?: {
            maxPriceInGwei?: number | undefined;
            speed?: "standard" | "fast" | "fastest" | undefined;
        } | undefined;
        gasless?: {
            experimentalChainlessSupport?: boolean | undefined;
            openzeppelin: {
                relayerForwarderAddress?: string | undefined;
                useEOAForwarder?: boolean | undefined;
                relayerUrl: string;
            };
        } | {
            biconomy: {
                deadlineSeconds?: number | undefined;
                apiId: string;
                apiKey: string;
            };
        } | undefined;
        gatewayUrls?: string[] | undefined;
    } | undefined) => Promise<import("./prebuilt-implementations/multiwrap").Multiwrap>;
    getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
        [x: string]: any;
        name?: string | undefined;
        inputs?: {
            [x: string]: any;
            stateMutability?: string | undefined;
            components?: {
                [x: string]: any;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
            name: string;
        }[] | undefined;
        outputs?: {
            [x: string]: any;
            stateMutability?: string | undefined;
            components?: {
                [x: string]: any;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
            name: string;
        }[] | undefined;
        type: string;
    }[] | ({
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
        name?: undefined;
        outputs?: undefined;
    } | {
        anonymous: boolean;
        inputs: ({
            indexed: boolean;
            internalType: string;
            name: string;
            type: string;
            components?: undefined;
        } | {
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            indexed: boolean;
            internalType: string;
            name: string;
            type: string;
        })[];
        name: string;
        type: string;
        stateMutability?: undefined;
        outputs?: undefined;
    } | {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: {
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
    } | {
        inputs: ({
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            internalType: string;
            name: string;
            type: string;
        } | {
            internalType: string;
            name: string;
            type: string;
            components?: undefined;
        })[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
    } | {
        stateMutability: string;
        type: string;
        inputs?: undefined;
        anonymous?: undefined;
        name?: undefined;
        outputs?: undefined;
    })[]>;
};
export declare const NFTCollectionInitializer: {
    name: "TokenERC721";
    contractType: "nft-collection";
    schema: {
        deploy: import("zod").ZodObject<{
            symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                data?: any;
                name: string;
            }, {
                data?: any;
                name: string;
            }>]>, import("zod").ZodString]>>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            primary_sale_recipient: import("zod").ZodEffects<import("zod").ZodString, string, string>;
            trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            symbol: string;
            name: string;
            seller_fee_basis_points: number;
            fee_recipient: string;
            platform_fee_basis_points: number;
            platform_fee_recipient: string;
            primary_sale_recipient: string;
            trusted_forwarders: string[];
        }, {
            symbol?: string | undefined;
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            seller_fee_basis_points?: number | undefined;
            fee_recipient?: string | undefined;
            platform_fee_basis_points?: number | undefined;
            platform_fee_recipient?: string | undefined;
            trusted_forwarders?: string[] | undefined;
            name: string;
            primary_sale_recipient: string;
        }>;
        output: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodString>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: string | undefined;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            symbol: string;
            name: string;
            seller_fee_basis_points: number;
            fee_recipient: string;
        }, {
            symbol?: string | undefined;
            description?: string | undefined;
            image?: string | undefined;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            seller_fee_basis_points?: number | undefined;
            fee_recipient?: string | undefined;
            name: string;
        }>;
        input: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                data?: any;
                name: string;
            }, {
                data?: any;
                name: string;
            }>]>, import("zod").ZodString]>>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            symbol: string;
            name: string;
            seller_fee_basis_points: number;
            fee_recipient: string;
        }, {
            symbol?: string | undefined;
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            seller_fee_basis_points?: number | undefined;
            fee_recipient?: string | undefined;
            name: string;
        }>;
    };
    roles: readonly ["admin", "minter", "transfer"];
    initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
        supportedChains?: {
            chainId: number;
            slug: string;
            rpc: string[];
            nativeCurrency: {
                symbol: string;
                name: string;
                decimals: number;
            };
        }[] | undefined;
        thirdwebApiKey?: string | undefined;
        alchemyApiKey?: string | undefined;
        infuraApiKey?: string | undefined;
        readonlySettings?: {
            chainId?: number | undefined;
            rpcUrl: string;
        } | undefined;
        gasSettings?: {
            maxPriceInGwei?: number | undefined;
            speed?: "standard" | "fast" | "fastest" | undefined;
        } | undefined;
        gasless?: {
            experimentalChainlessSupport?: boolean | undefined;
            openzeppelin: {
                relayerForwarderAddress?: string | undefined;
                useEOAForwarder?: boolean | undefined;
                relayerUrl: string;
            };
        } | {
            biconomy: {
                deadlineSeconds?: number | undefined;
                apiId: string;
                apiKey: string;
            };
        } | undefined;
        gatewayUrls?: string[] | undefined;
    } | undefined) => Promise<import("./prebuilt-implementations/nft-collection").NFTCollection>;
    getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
        [x: string]: any;
        name?: string | undefined;
        inputs?: {
            [x: string]: any;
            stateMutability?: string | undefined;
            components?: {
                [x: string]: any;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
            name: string;
        }[] | undefined;
        outputs?: {
            [x: string]: any;
            stateMutability?: string | undefined;
            components?: {
                [x: string]: any;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
            name: string;
        }[] | undefined;
        type: string;
    }[] | ({
        inputs: never[];
        stateMutability: string;
        type: string;
        name?: undefined;
        anonymous?: undefined;
        outputs?: undefined;
    } | {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        type: string;
        stateMutability?: undefined;
        anonymous?: undefined;
        outputs?: undefined;
    } | {
        anonymous: boolean;
        inputs: ({
            indexed: boolean;
            internalType: string;
            name: string;
            type: string;
            components?: undefined;
        } | {
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            indexed: boolean;
            internalType: string;
            name: string;
            type: string;
        })[];
        name: string;
        type: string;
        stateMutability?: undefined;
        outputs?: undefined;
    } | {
        inputs: ({
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            internalType: string;
            name: string;
            type: string;
        } | {
            internalType: string;
            name: string;
            type: string;
            components?: undefined;
        })[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
    })[]>;
};
export declare const NFTDropInitializer: {
    name: "DropERC721";
    contractType: "nft-drop";
    schema: {
        deploy: import("zod").ZodObject<{
            symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                data?: any;
                name: string;
            }, {
                data?: any;
                name: string;
            }>]>, import("zod").ZodString]>>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            primary_sale_recipient: import("zod").ZodEffects<import("zod").ZodString, string, string>;
            trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            symbol: string;
            name: string;
            seller_fee_basis_points: number;
            fee_recipient: string;
            merkle: Record<string, string>;
            platform_fee_basis_points: number;
            platform_fee_recipient: string;
            primary_sale_recipient: string;
            trusted_forwarders: string[];
        }, {
            symbol?: string | undefined;
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            seller_fee_basis_points?: number | undefined;
            fee_recipient?: string | undefined;
            merkle?: Record<string, string> | undefined;
            platform_fee_basis_points?: number | undefined;
            platform_fee_recipient?: string | undefined;
            trusted_forwarders?: string[] | undefined;
            name: string;
            primary_sale_recipient: string;
        }>;
        output: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodString>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: string | undefined;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            symbol: string;
            name: string;
            seller_fee_basis_points: number;
            fee_recipient: string;
            merkle: Record<string, string>;
        }, {
            symbol?: string | undefined;
            description?: string | undefined;
            image?: string | undefined;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            seller_fee_basis_points?: number | undefined;
            fee_recipient?: string | undefined;
            merkle?: Record<string, string> | undefined;
            name: string;
        }>;
        input: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                data?: any;
                name: string;
            }, {
                data?: any;
                name: string;
            }>]>, import("zod").ZodString]>>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            symbol: string;
            name: string;
            seller_fee_basis_points: number;
            fee_recipient: string;
            merkle: Record<string, string>;
        }, {
            symbol?: string | undefined;
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            seller_fee_basis_points?: number | undefined;
            fee_recipient?: string | undefined;
            merkle?: Record<string, string> | undefined;
            name: string;
        }>;
    };
    roles: readonly ["admin", "minter", "transfer"];
    initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
        supportedChains?: {
            chainId: number;
            slug: string;
            rpc: string[];
            nativeCurrency: {
                symbol: string;
                name: string;
                decimals: number;
            };
        }[] | undefined;
        thirdwebApiKey?: string | undefined;
        alchemyApiKey?: string | undefined;
        infuraApiKey?: string | undefined;
        readonlySettings?: {
            chainId?: number | undefined;
            rpcUrl: string;
        } | undefined;
        gasSettings?: {
            maxPriceInGwei?: number | undefined;
            speed?: "standard" | "fast" | "fastest" | undefined;
        } | undefined;
        gasless?: {
            experimentalChainlessSupport?: boolean | undefined;
            openzeppelin: {
                relayerForwarderAddress?: string | undefined;
                useEOAForwarder?: boolean | undefined;
                relayerUrl: string;
            };
        } | {
            biconomy: {
                deadlineSeconds?: number | undefined;
                apiId: string;
                apiKey: string;
            };
        } | undefined;
        gatewayUrls?: string[] | undefined;
    } | undefined) => Promise<import("./prebuilt-implementations/nft-drop").NFTDrop>;
    getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
        [x: string]: any;
        name?: string | undefined;
        inputs?: {
            [x: string]: any;
            stateMutability?: string | undefined;
            components?: {
                [x: string]: any;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
            name: string;
        }[] | undefined;
        outputs?: {
            [x: string]: any;
            stateMutability?: string | undefined;
            components?: {
                [x: string]: any;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
            name: string;
        }[] | undefined;
        type: string;
    }[] | ({
        inputs: never[];
        stateMutability: string;
        type: string;
        name?: undefined;
        anonymous?: undefined;
        outputs?: undefined;
    } | {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        type: string;
        stateMutability?: undefined;
        anonymous?: undefined;
        outputs?: undefined;
    } | {
        anonymous: boolean;
        inputs: ({
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            indexed: boolean;
            internalType: string;
            name: string;
            type: string;
        } | {
            indexed: boolean;
            internalType: string;
            name: string;
            type: string;
            components?: undefined;
        })[];
        name: string;
        type: string;
        stateMutability?: undefined;
        outputs?: undefined;
    } | {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: {
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
    } | {
        inputs: ({
            internalType: string;
            name: string;
            type: string;
            components?: undefined;
        } | {
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            internalType: string;
            name: string;
            type: string;
        })[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
    })[] | ({
        inputs: never[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
        name?: undefined;
        outputs?: undefined;
    } | {
        anonymous: boolean;
        inputs: {
            indexed: boolean;
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        type: string;
        stateMutability?: undefined;
        outputs?: undefined;
    } | {
        anonymous: boolean;
        inputs: {
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            indexed: boolean;
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        type: string;
        stateMutability?: undefined;
        outputs?: undefined;
    } | {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
    } | {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: {
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
    } | {
        inputs: ({
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            internalType: string;
            name: string;
            type: string;
        } | {
            internalType: string;
            name: string;
            type: string;
            components?: undefined;
        })[];
        name: string;
        outputs: never[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
    })[]>;
};
export declare const PackInitializer: {
    name: "Pack";
    contractType: "pack";
    schema: {
        deploy: import("zod").ZodObject<{
            symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                data?: any;
                name: string;
            }, {
                data?: any;
                name: string;
            }>]>, import("zod").ZodString]>>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            symbol: string;
            name: string;
            seller_fee_basis_points: number;
            fee_recipient: string;
            platform_fee_basis_points: number;
            platform_fee_recipient: string;
            trusted_forwarders: string[];
        }, {
            symbol?: string | undefined;
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            seller_fee_basis_points?: number | undefined;
            fee_recipient?: string | undefined;
            platform_fee_basis_points?: number | undefined;
            platform_fee_recipient?: string | undefined;
            trusted_forwarders?: string[] | undefined;
            name: string;
        }>;
        output: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodString>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: string | undefined;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            symbol: string;
            name: string;
            seller_fee_basis_points: number;
            fee_recipient: string;
        }, {
            symbol?: string | undefined;
            description?: string | undefined;
            image?: string | undefined;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            seller_fee_basis_points?: number | undefined;
            fee_recipient?: string | undefined;
            name: string;
        }>;
        input: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                data?: any;
                name: string;
            }, {
                data?: any;
                name: string;
            }>]>, import("zod").ZodString]>>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            symbol: string;
            name: string;
            seller_fee_basis_points: number;
            fee_recipient: string;
        }, {
            symbol?: string | undefined;
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            seller_fee_basis_points?: number | undefined;
            fee_recipient?: string | undefined;
            name: string;
        }>;
    };
    roles: readonly ["admin", "minter", "asset", "transfer"];
    initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
        supportedChains?: {
            chainId: number;
            slug: string;
            rpc: string[];
            nativeCurrency: {
                symbol: string;
                name: string;
                decimals: number;
            };
        }[] | undefined;
        thirdwebApiKey?: string | undefined;
        alchemyApiKey?: string | undefined;
        infuraApiKey?: string | undefined;
        readonlySettings?: {
            chainId?: number | undefined;
            rpcUrl: string;
        } | undefined;
        gasSettings?: {
            maxPriceInGwei?: number | undefined;
            speed?: "standard" | "fast" | "fastest" | undefined;
        } | undefined;
        gasless?: {
            experimentalChainlessSupport?: boolean | undefined;
            openzeppelin: {
                relayerForwarderAddress?: string | undefined;
                useEOAForwarder?: boolean | undefined;
                relayerUrl: string;
            };
        } | {
            biconomy: {
                deadlineSeconds?: number | undefined;
                apiId: string;
                apiKey: string;
            };
        } | undefined;
        gatewayUrls?: string[] | undefined;
    } | undefined) => Promise<import("./prebuilt-implementations/pack").Pack>;
    getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<Abi>;
};
export declare const SignatureDropInitializer: {
    name: "SignatureDrop";
    contractType: "signature-drop";
    schema: {
        deploy: import("zod").ZodObject<{
            symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                data?: any;
                name: string;
            }, {
                data?: any;
                name: string;
            }>]>, import("zod").ZodString]>>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            primary_sale_recipient: import("zod").ZodEffects<import("zod").ZodString, string, string>;
            trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            symbol: string;
            name: string;
            seller_fee_basis_points: number;
            fee_recipient: string;
            merkle: Record<string, string>;
            platform_fee_basis_points: number;
            platform_fee_recipient: string;
            primary_sale_recipient: string;
            trusted_forwarders: string[];
        }, {
            symbol?: string | undefined;
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            seller_fee_basis_points?: number | undefined;
            fee_recipient?: string | undefined;
            merkle?: Record<string, string> | undefined;
            platform_fee_basis_points?: number | undefined;
            platform_fee_recipient?: string | undefined;
            trusted_forwarders?: string[] | undefined;
            name: string;
            primary_sale_recipient: string;
        }>;
        output: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodString>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: string | undefined;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            symbol: string;
            name: string;
            seller_fee_basis_points: number;
            fee_recipient: string;
            merkle: Record<string, string>;
        }, {
            symbol?: string | undefined;
            description?: string | undefined;
            image?: string | undefined;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            seller_fee_basis_points?: number | undefined;
            fee_recipient?: string | undefined;
            merkle?: Record<string, string> | undefined;
            name: string;
        }>;
        input: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                data?: any;
                name: string;
            }, {
                data?: any;
                name: string;
            }>]>, import("zod").ZodString]>>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            symbol: string;
            name: string;
            seller_fee_basis_points: number;
            fee_recipient: string;
            merkle: Record<string, string>;
        }, {
            symbol?: string | undefined;
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            seller_fee_basis_points?: number | undefined;
            fee_recipient?: string | undefined;
            merkle?: Record<string, string> | undefined;
            name: string;
        }>;
    };
    roles: readonly ["admin", "minter", "transfer"];
    initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
        supportedChains?: {
            chainId: number;
            slug: string;
            rpc: string[];
            nativeCurrency: {
                symbol: string;
                name: string;
                decimals: number;
            };
        }[] | undefined;
        thirdwebApiKey?: string | undefined;
        alchemyApiKey?: string | undefined;
        infuraApiKey?: string | undefined;
        readonlySettings?: {
            chainId?: number | undefined;
            rpcUrl: string;
        } | undefined;
        gasSettings?: {
            maxPriceInGwei?: number | undefined;
            speed?: "standard" | "fast" | "fastest" | undefined;
        } | undefined;
        gasless?: {
            experimentalChainlessSupport?: boolean | undefined;
            openzeppelin: {
                relayerForwarderAddress?: string | undefined;
                useEOAForwarder?: boolean | undefined;
                relayerUrl: string;
            };
        } | {
            biconomy: {
                deadlineSeconds?: number | undefined;
                apiId: string;
                apiKey: string;
            };
        } | undefined;
        gatewayUrls?: string[] | undefined;
    } | undefined) => Promise<import("./prebuilt-implementations/signature-drop").SignatureDrop>;
    getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
        [x: string]: any;
        name?: string | undefined;
        inputs?: {
            [x: string]: any;
            stateMutability?: string | undefined;
            components?: {
                [x: string]: any;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
            name: string;
        }[] | undefined;
        outputs?: {
            [x: string]: any;
            stateMutability?: string | undefined;
            components?: {
                [x: string]: any;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
            name: string;
        }[] | undefined;
        type: string;
    }[] | ({
        inputs: never[];
        name: string;
        type: string;
        anonymous?: undefined;
        outputs?: undefined;
        stateMutability?: undefined;
    } | {
        anonymous: boolean;
        inputs: ({
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            indexed: boolean;
            internalType: string;
            name: string;
            type: string;
        } | {
            indexed: boolean;
            internalType: string;
            name: string;
            type: string;
            components?: undefined;
        })[];
        name: string;
        type: string;
        outputs?: undefined;
        stateMutability?: undefined;
    } | {
        inputs: ({
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            internalType: string;
            name: string;
            type: string;
        } | {
            internalType: string;
            name: string;
            type: string;
            components?: undefined;
        })[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
    })[]>;
};
export declare const SplitInitializer: {
    name: "Split";
    contractType: "split";
    schema: {
        deploy: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                data?: any;
                name: string;
            }, {
                data?: any;
                name: string;
            }>]>, import("zod").ZodString]>>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            recipients: import("zod").ZodEffects<import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodObject<{
                address: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                sharesBps: import("zod").ZodNumber;
            }, "strip", import("zod").ZodTypeAny, {
                address: string;
                sharesBps: number;
            }, {
                address: string;
                sharesBps: number;
            }>, "many">>, {
                address: string;
                sharesBps: number;
            }[], {
                address: string;
                sharesBps: number;
            }[] | undefined>;
            trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            name: string;
            trusted_forwarders: string[];
            recipients: {
                address: string;
                sharesBps: number;
            }[];
        }, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            trusted_forwarders?: string[] | undefined;
            recipients?: {
                address: string;
                sharesBps: number;
            }[] | undefined;
            name: string;
        }>;
        output: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodString>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            recipients: import("zod").ZodArray<import("zod").ZodObject<{
                address: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                sharesBps: import("zod").ZodNumber;
            }, "strip", import("zod").ZodTypeAny, {
                address: string;
                sharesBps: number;
            }, {
                address: string;
                sharesBps: number;
            }>, "many">;
        }, "strip", import("zod").ZodUnknown, {
            [x: string]: unknown;
            description?: string | undefined;
            image?: string | undefined;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            name: string;
            recipients: {
                address: string;
                sharesBps: number;
            }[];
        }, {
            [x: string]: unknown;
            description?: string | undefined;
            image?: string | undefined;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            name: string;
            recipients: {
                address: string;
                sharesBps: number;
            }[];
        }>;
        input: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                data?: any;
                name: string;
            }, {
                data?: any;
                name: string;
            }>]>, import("zod").ZodString]>>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            recipients: import("zod").ZodEffects<import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodObject<{
                address: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                sharesBps: import("zod").ZodNumber;
            }, "strip", import("zod").ZodTypeAny, {
                address: string;
                sharesBps: number;
            }, {
                address: string;
                sharesBps: number;
            }>, "many">>, {
                address: string;
                sharesBps: number;
            }[], {
                address: string;
                sharesBps: number;
            }[] | undefined>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            name: string;
            recipients: {
                address: string;
                sharesBps: number;
            }[];
        }, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            recipients?: {
                address: string;
                sharesBps: number;
            }[] | undefined;
            name: string;
        }>;
    };
    roles: readonly ["admin"];
    initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
        supportedChains?: {
            chainId: number;
            slug: string;
            rpc: string[];
            nativeCurrency: {
                symbol: string;
                name: string;
                decimals: number;
            };
        }[] | undefined;
        thirdwebApiKey?: string | undefined;
        alchemyApiKey?: string | undefined;
        infuraApiKey?: string | undefined;
        readonlySettings?: {
            chainId?: number | undefined;
            rpcUrl: string;
        } | undefined;
        gasSettings?: {
            maxPriceInGwei?: number | undefined;
            speed?: "standard" | "fast" | "fastest" | undefined;
        } | undefined;
        gasless?: {
            experimentalChainlessSupport?: boolean | undefined;
            openzeppelin: {
                relayerForwarderAddress?: string | undefined;
                useEOAForwarder?: boolean | undefined;
                relayerUrl: string;
            };
        } | {
            biconomy: {
                deadlineSeconds?: number | undefined;
                apiId: string;
                apiKey: string;
            };
        } | undefined;
        gatewayUrls?: string[] | undefined;
    } | undefined) => Promise<import("./prebuilt-implementations/split").Split>;
    getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
        [x: string]: any;
        name?: string | undefined;
        inputs?: {
            [x: string]: any;
            stateMutability?: string | undefined;
            components?: {
                [x: string]: any;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
            name: string;
        }[] | undefined;
        outputs?: {
            [x: string]: any;
            stateMutability?: string | undefined;
            components?: {
                [x: string]: any;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
            name: string;
        }[] | undefined;
        type: string;
    }[] | ({
        inputs: never[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
        name?: undefined;
        outputs?: undefined;
    } | {
        anonymous: boolean;
        inputs: {
            indexed: boolean;
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        type: string;
        stateMutability?: undefined;
        outputs?: undefined;
    } | {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
    } | {
        stateMutability: string;
        type: string;
        inputs?: undefined;
        anonymous?: undefined;
        name?: undefined;
        outputs?: undefined;
    })[]>;
};
export declare const TokenDropInitializer: {
    name: "DropERC20";
    contractType: "token-drop";
    schema: {
        deploy: import("zod").ZodObject<{
            symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                data?: any;
                name: string;
            }, {
                data?: any;
                name: string;
            }>]>, import("zod").ZodString]>>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            primary_sale_recipient: import("zod").ZodEffects<import("zod").ZodString, string, string>;
            trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            symbol: string;
            name: string;
            merkle: Record<string, string>;
            platform_fee_basis_points: number;
            platform_fee_recipient: string;
            primary_sale_recipient: string;
            trusted_forwarders: string[];
        }, {
            symbol?: string | undefined;
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            merkle?: Record<string, string> | undefined;
            platform_fee_basis_points?: number | undefined;
            platform_fee_recipient?: string | undefined;
            trusted_forwarders?: string[] | undefined;
            name: string;
            primary_sale_recipient: string;
        }>;
        output: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodString>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: string | undefined;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            symbol: string;
            name: string;
            merkle: Record<string, string>;
        }, {
            symbol?: string | undefined;
            description?: string | undefined;
            image?: string | undefined;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            merkle?: Record<string, string> | undefined;
            name: string;
        }>;
        input: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                data?: any;
                name: string;
            }, {
                data?: any;
                name: string;
            }>]>, import("zod").ZodString]>>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            symbol: string;
            name: string;
            merkle: Record<string, string>;
        }, {
            symbol?: string | undefined;
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            merkle?: Record<string, string> | undefined;
            name: string;
        }>;
    };
    roles: readonly ["admin", "transfer"];
    initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
        supportedChains?: {
            chainId: number;
            slug: string;
            rpc: string[];
            nativeCurrency: {
                symbol: string;
                name: string;
                decimals: number;
            };
        }[] | undefined;
        thirdwebApiKey?: string | undefined;
        alchemyApiKey?: string | undefined;
        infuraApiKey?: string | undefined;
        readonlySettings?: {
            chainId?: number | undefined;
            rpcUrl: string;
        } | undefined;
        gasSettings?: {
            maxPriceInGwei?: number | undefined;
            speed?: "standard" | "fast" | "fastest" | undefined;
        } | undefined;
        gasless?: {
            experimentalChainlessSupport?: boolean | undefined;
            openzeppelin: {
                relayerForwarderAddress?: string | undefined;
                useEOAForwarder?: boolean | undefined;
                relayerUrl: string;
            };
        } | {
            biconomy: {
                deadlineSeconds?: number | undefined;
                apiId: string;
                apiKey: string;
            };
        } | undefined;
        gatewayUrls?: string[] | undefined;
    } | undefined) => Promise<import("./prebuilt-implementations/token-drop").TokenDrop>;
    getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
        [x: string]: any;
        name?: string | undefined;
        inputs?: {
            [x: string]: any;
            stateMutability?: string | undefined;
            components?: {
                [x: string]: any;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
            name: string;
        }[] | undefined;
        outputs?: {
            [x: string]: any;
            stateMutability?: string | undefined;
            components?: {
                [x: string]: any;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
            name: string;
        }[] | undefined;
        type: string;
    }[] | ({
        inputs: never[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
        name?: undefined;
        outputs?: undefined;
    } | {
        anonymous: boolean;
        inputs: {
            indexed: boolean;
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        type: string;
        stateMutability?: undefined;
        outputs?: undefined;
    } | {
        anonymous: boolean;
        inputs: {
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            indexed: boolean;
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        type: string;
        stateMutability?: undefined;
        outputs?: undefined;
    } | {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
    } | {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: {
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
    } | {
        inputs: ({
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            internalType: string;
            name: string;
            type: string;
        } | {
            internalType: string;
            name: string;
            type: string;
            components?: undefined;
        })[];
        name: string;
        outputs: never[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
    })[]>;
};
export declare const TokenInitializer: {
    name: "TokenERC20";
    contractType: "token";
    schema: {
        deploy: import("zod").ZodObject<{
            symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                data?: any;
                name: string;
            }, {
                data?: any;
                name: string;
            }>]>, import("zod").ZodString]>>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
            platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
            primary_sale_recipient: import("zod").ZodEffects<import("zod").ZodString, string, string>;
            trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            symbol: string;
            name: string;
            platform_fee_basis_points: number;
            platform_fee_recipient: string;
            primary_sale_recipient: string;
            trusted_forwarders: string[];
        }, {
            symbol?: string | undefined;
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            platform_fee_basis_points?: number | undefined;
            platform_fee_recipient?: string | undefined;
            trusted_forwarders?: string[] | undefined;
            name: string;
            primary_sale_recipient: string;
        }>;
        output: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodString>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: string | undefined;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            symbol: string;
            name: string;
        }, {
            symbol?: string | undefined;
            description?: string | undefined;
            image?: string | undefined;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            name: string;
        }>;
        input: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                data?: any;
                name: string;
            }, {
                data?: any;
                name: string;
            }>]>, import("zod").ZodString]>>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            symbol: string;
            name: string;
        }, {
            symbol?: string | undefined;
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            name: string;
        }>;
    };
    roles: readonly ["admin", "minter", "transfer"];
    initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
        supportedChains?: {
            chainId: number;
            slug: string;
            rpc: string[];
            nativeCurrency: {
                symbol: string;
                name: string;
                decimals: number;
            };
        }[] | undefined;
        thirdwebApiKey?: string | undefined;
        alchemyApiKey?: string | undefined;
        infuraApiKey?: string | undefined;
        readonlySettings?: {
            chainId?: number | undefined;
            rpcUrl: string;
        } | undefined;
        gasSettings?: {
            maxPriceInGwei?: number | undefined;
            speed?: "standard" | "fast" | "fastest" | undefined;
        } | undefined;
        gasless?: {
            experimentalChainlessSupport?: boolean | undefined;
            openzeppelin: {
                relayerForwarderAddress?: string | undefined;
                useEOAForwarder?: boolean | undefined;
                relayerUrl: string;
            };
        } | {
            biconomy: {
                deadlineSeconds?: number | undefined;
                apiId: string;
                apiKey: string;
            };
        } | undefined;
        gatewayUrls?: string[] | undefined;
    } | undefined) => Promise<import("./prebuilt-implementations/token").Token>;
    getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
        [x: string]: any;
        name?: string | undefined;
        inputs?: {
            [x: string]: any;
            stateMutability?: string | undefined;
            components?: {
                [x: string]: any;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
            name: string;
        }[] | undefined;
        outputs?: {
            [x: string]: any;
            stateMutability?: string | undefined;
            components?: {
                [x: string]: any;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
            name: string;
        }[] | undefined;
        type: string;
    }[] | ({
        inputs: never[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
        name?: undefined;
        outputs?: undefined;
    } | {
        anonymous: boolean;
        inputs: ({
            indexed: boolean;
            internalType: string;
            name: string;
            type: string;
            components?: undefined;
        } | {
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            indexed: boolean;
            internalType: string;
            name: string;
            type: string;
        })[];
        name: string;
        type: string;
        stateMutability?: undefined;
        outputs?: undefined;
    } | {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: {
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
    } | {
        inputs: ({
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            internalType: string;
            name: string;
            type: string;
        } | {
            internalType: string;
            name: string;
            type: string;
            components?: undefined;
        })[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
    })[]>;
};
export declare const VoteInitializer: {
    name: "VoteERC20";
    contractType: "vote";
    schema: {
        deploy: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                data?: any;
                name: string;
            }, {
                data?: any;
                name: string;
            }>]>, import("zod").ZodString]>>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            voting_delay_in_blocks: import("zod").ZodDefault<import("zod").ZodNumber>;
            voting_period_in_blocks: import("zod").ZodDefault<import("zod").ZodNumber>;
            voting_token_address: import("zod").ZodEffects<import("zod").ZodString, string, string>;
            voting_quorum_fraction: import("zod").ZodDefault<import("zod").ZodNumber>;
            proposal_token_threshold: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBigInt, import("zod").ZodType<ethers.BigNumber, import("zod").ZodTypeDef, ethers.BigNumber>]>, ethers.BigNumber, string | number | bigint | ethers.BigNumber>, string, string | number | bigint | ethers.BigNumber>>;
            trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            name: string;
            trusted_forwarders: string[];
            voting_delay_in_blocks: number;
            voting_period_in_blocks: number;
            voting_token_address: string;
            voting_quorum_fraction: number;
            proposal_token_threshold: string;
        }, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            trusted_forwarders?: string[] | undefined;
            voting_delay_in_blocks?: number | undefined;
            voting_period_in_blocks?: number | undefined;
            voting_quorum_fraction?: number | undefined;
            proposal_token_threshold?: string | number | bigint | ethers.BigNumber | undefined;
            name: string;
            voting_token_address: string;
        }>;
        output: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodString>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            voting_delay_in_blocks: import("zod").ZodDefault<import("zod").ZodNumber>;
            voting_period_in_blocks: import("zod").ZodDefault<import("zod").ZodNumber>;
            voting_token_address: import("zod").ZodEffects<import("zod").ZodString, string, string>;
            voting_quorum_fraction: import("zod").ZodDefault<import("zod").ZodNumber>;
            proposal_token_threshold: import("zod").ZodEffects<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBigInt, import("zod").ZodType<ethers.BigNumber, import("zod").ZodTypeDef, ethers.BigNumber>]>, ethers.BigNumber, string | number | bigint | ethers.BigNumber>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: string | undefined;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            name: string;
            voting_delay_in_blocks: number;
            voting_period_in_blocks: number;
            voting_token_address: string;
            voting_quorum_fraction: number;
            proposal_token_threshold: ethers.BigNumber;
        }, {
            description?: string | undefined;
            image?: string | undefined;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            voting_delay_in_blocks?: number | undefined;
            voting_period_in_blocks?: number | undefined;
            voting_quorum_fraction?: number | undefined;
            name: string;
            voting_token_address: string;
            proposal_token_threshold: string | number | bigint | ethers.BigNumber;
        }>;
        input: import("zod").ZodObject<{
            name: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                data?: any;
                name: string;
            }, {
                data?: any;
                name: string;
            }>]>, import("zod").ZodString]>>;
            external_link: import("zod").ZodOptional<import("zod").ZodString>;
            app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            voting_delay_in_blocks: import("zod").ZodDefault<import("zod").ZodNumber>;
            voting_period_in_blocks: import("zod").ZodDefault<import("zod").ZodNumber>;
            voting_token_address: import("zod").ZodEffects<import("zod").ZodString, string, string>;
            voting_quorum_fraction: import("zod").ZodDefault<import("zod").ZodNumber>;
            proposal_token_threshold: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBigInt, import("zod").ZodType<ethers.BigNumber, import("zod").ZodTypeDef, ethers.BigNumber>]>, ethers.BigNumber, string | number | bigint | ethers.BigNumber>, string, string | number | bigint | ethers.BigNumber>>;
        }, "strip", import("zod").ZodTypeAny, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            name: string;
            voting_delay_in_blocks: number;
            voting_period_in_blocks: number;
            voting_token_address: string;
            voting_quorum_fraction: number;
            proposal_token_threshold: string;
        }, {
            description?: string | undefined;
            image?: any;
            external_link?: string | undefined;
            app_uri?: string | undefined;
            voting_delay_in_blocks?: number | undefined;
            voting_period_in_blocks?: number | undefined;
            voting_quorum_fraction?: number | undefined;
            proposal_token_threshold?: string | number | bigint | ethers.BigNumber | undefined;
            name: string;
            voting_token_address: string;
        }>;
    };
    roles: readonly [];
    initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
        supportedChains?: {
            chainId: number;
            slug: string;
            rpc: string[];
            nativeCurrency: {
                symbol: string;
                name: string;
                decimals: number;
            };
        }[] | undefined;
        thirdwebApiKey?: string | undefined;
        alchemyApiKey?: string | undefined;
        infuraApiKey?: string | undefined;
        readonlySettings?: {
            chainId?: number | undefined;
            rpcUrl: string;
        } | undefined;
        gasSettings?: {
            maxPriceInGwei?: number | undefined;
            speed?: "standard" | "fast" | "fastest" | undefined;
        } | undefined;
        gasless?: {
            experimentalChainlessSupport?: boolean | undefined;
            openzeppelin: {
                relayerForwarderAddress?: string | undefined;
                useEOAForwarder?: boolean | undefined;
                relayerUrl: string;
            };
        } | {
            biconomy: {
                deadlineSeconds?: number | undefined;
                apiId: string;
                apiKey: string;
            };
        } | undefined;
        gatewayUrls?: string[] | undefined;
    } | undefined) => Promise<import("./prebuilt-implementations/vote").Vote>;
    getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
        [x: string]: any;
        name?: string | undefined;
        inputs?: {
            [x: string]: any;
            stateMutability?: string | undefined;
            components?: {
                [x: string]: any;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
            name: string;
        }[] | undefined;
        outputs?: {
            [x: string]: any;
            stateMutability?: string | undefined;
            components?: {
                [x: string]: any;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
            name: string;
        }[] | undefined;
        type: string;
    }[] | ({
        inputs: never[];
        stateMutability: string;
        type: string;
        name?: undefined;
        anonymous?: undefined;
        outputs?: undefined;
    } | {
        inputs: never[];
        name: string;
        type: string;
        stateMutability?: undefined;
        anonymous?: undefined;
        outputs?: undefined;
    } | {
        anonymous: boolean;
        inputs: {
            indexed: boolean;
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        type: string;
        stateMutability?: undefined;
        outputs?: undefined;
    } | {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
    } | {
        inputs: never[];
        name: string;
        outputs: {
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
    } | {
        stateMutability: string;
        type: string;
        inputs?: undefined;
        name?: undefined;
        anonymous?: undefined;
        outputs?: undefined;
    })[]>;
};
/**
 * a map from contractType -> contract metadata
 * @internal
 */
export declare const PREBUILT_CONTRACTS_MAP: {
    readonly "edition-drop": {
        name: "DropERC1155";
        contractType: "edition-drop";
        schema: {
            deploy: import("zod").ZodObject<{
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                primary_sale_recipient: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
                merkle: Record<string, string>;
                platform_fee_basis_points: number;
                platform_fee_recipient: string;
                primary_sale_recipient: string;
                trusted_forwarders: string[];
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                merkle?: Record<string, string> | undefined;
                platform_fee_basis_points?: number | undefined;
                platform_fee_recipient?: string | undefined;
                trusted_forwarders?: string[] | undefined;
                name: string;
                primary_sale_recipient: string;
            }>;
            output: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodString>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
                merkle: Record<string, string>;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                merkle?: Record<string, string> | undefined;
                name: string;
            }>;
            input: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
                merkle: Record<string, string>;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                merkle?: Record<string, string> | undefined;
                name: string;
            }>;
        };
        roles: readonly ["admin", "minter", "transfer"];
        initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
            supportedChains?: {
                chainId: number;
                slug: string;
                rpc: string[];
                nativeCurrency: {
                    symbol: string;
                    name: string;
                    decimals: number;
                };
            }[] | undefined;
            thirdwebApiKey?: string | undefined;
            alchemyApiKey?: string | undefined;
            infuraApiKey?: string | undefined;
            readonlySettings?: {
                chainId?: number | undefined;
                rpcUrl: string;
            } | undefined;
            gasSettings?: {
                maxPriceInGwei?: number | undefined;
                speed?: "standard" | "fast" | "fastest" | undefined;
            } | undefined;
            gasless?: {
                experimentalChainlessSupport?: boolean | undefined;
                openzeppelin: {
                    relayerForwarderAddress?: string | undefined;
                    useEOAForwarder?: boolean | undefined;
                    relayerUrl: string;
                };
            } | {
                biconomy: {
                    deadlineSeconds?: number | undefined;
                    apiId: string;
                    apiKey: string;
                };
            } | undefined;
            gatewayUrls?: string[] | undefined;
        } | undefined) => Promise<import("./prebuilt-implementations/edition-drop").EditionDrop>;
        getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
            [x: string]: any;
            name?: string | undefined;
            inputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            outputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
        }[] | ({
            inputs: never[];
            stateMutability: string;
            type: string;
            name?: undefined;
            anonymous?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            type: string;
            stateMutability?: undefined;
            anonymous?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: ({
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            } | {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            })[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            inputs: ({
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            } | {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            })[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        })[] | ({
            inputs: never[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
            name?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: ({
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            } | {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            })[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            inputs: ({
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            } | {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            })[];
            name: string;
            outputs: never[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        })[]>;
    };
    readonly edition: {
        name: "TokenERC1155";
        contractType: "edition";
        schema: {
            deploy: import("zod").ZodObject<{
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                primary_sale_recipient: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
                platform_fee_basis_points: number;
                platform_fee_recipient: string;
                primary_sale_recipient: string;
                trusted_forwarders: string[];
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                platform_fee_basis_points?: number | undefined;
                platform_fee_recipient?: string | undefined;
                trusted_forwarders?: string[] | undefined;
                name: string;
                primary_sale_recipient: string;
            }>;
            output: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodString>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                name: string;
            }>;
            input: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                name: string;
            }>;
        };
        roles: readonly ["admin", "minter", "transfer"];
        initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
            supportedChains?: {
                chainId: number;
                slug: string;
                rpc: string[];
                nativeCurrency: {
                    symbol: string;
                    name: string;
                    decimals: number;
                };
            }[] | undefined;
            thirdwebApiKey?: string | undefined;
            alchemyApiKey?: string | undefined;
            infuraApiKey?: string | undefined;
            readonlySettings?: {
                chainId?: number | undefined;
                rpcUrl: string;
            } | undefined;
            gasSettings?: {
                maxPriceInGwei?: number | undefined;
                speed?: "standard" | "fast" | "fastest" | undefined;
            } | undefined;
            gasless?: {
                experimentalChainlessSupport?: boolean | undefined;
                openzeppelin: {
                    relayerForwarderAddress?: string | undefined;
                    useEOAForwarder?: boolean | undefined;
                    relayerUrl: string;
                };
            } | {
                biconomy: {
                    deadlineSeconds?: number | undefined;
                    apiId: string;
                    apiKey: string;
                };
            } | undefined;
            gatewayUrls?: string[] | undefined;
        } | undefined) => Promise<import("./prebuilt-implementations/edition").Edition>;
        getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
            [x: string]: any;
            name?: string | undefined;
            inputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            outputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
        }[] | ({
            inputs: never[];
            stateMutability: string;
            type: string;
            name?: undefined;
            anonymous?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            type: string;
            stateMutability?: undefined;
            anonymous?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: ({
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            } | {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            })[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            inputs: ({
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            } | {
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            })[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        })[]>;
    };
    readonly marketplace: {
        name: "Marketplace";
        contractType: "marketplace";
        schema: {
            deploy: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
                platform_fee_basis_points: number;
                platform_fee_recipient: string;
                trusted_forwarders: string[];
            }, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                platform_fee_basis_points?: number | undefined;
                platform_fee_recipient?: string | undefined;
                trusted_forwarders?: string[] | undefined;
                name: string;
            }>;
            output: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodUnknown, {
                [x: string]: unknown;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
            }, {
                [x: string]: unknown;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
            }>;
            input: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
            }, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
            }>;
        };
        roles: readonly ["admin", "lister", "asset"];
        initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
            supportedChains?: {
                chainId: number;
                slug: string;
                rpc: string[];
                nativeCurrency: {
                    symbol: string;
                    name: string;
                    decimals: number;
                };
            }[] | undefined;
            thirdwebApiKey?: string | undefined;
            alchemyApiKey?: string | undefined;
            infuraApiKey?: string | undefined;
            readonlySettings?: {
                chainId?: number | undefined;
                rpcUrl: string;
            } | undefined;
            gasSettings?: {
                maxPriceInGwei?: number | undefined;
                speed?: "standard" | "fast" | "fastest" | undefined;
            } | undefined;
            gasless?: {
                experimentalChainlessSupport?: boolean | undefined;
                openzeppelin: {
                    relayerForwarderAddress?: string | undefined;
                    useEOAForwarder?: boolean | undefined;
                    relayerUrl: string;
                };
            } | {
                biconomy: {
                    deadlineSeconds?: number | undefined;
                    apiId: string;
                    apiKey: string;
                };
            } | undefined;
            gatewayUrls?: string[] | undefined;
        } | undefined) => Promise<import("./prebuilt-implementations/marketplace").Marketplace>;
        getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
            [x: string]: any;
            name?: string | undefined;
            inputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            outputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
        }[] | ({
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
            name?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: ({
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            } | {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            })[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: never[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            stateMutability: string;
            type: string;
            inputs?: undefined;
            anonymous?: undefined;
            name?: undefined;
            outputs?: undefined;
        })[]>;
    };
    readonly "marketplace-v3": {
        name: "MarketplaceRouter";
        contractType: "marketplace-v3";
        schema: {
            deploy: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
                platform_fee_basis_points: number;
                platform_fee_recipient: string;
                trusted_forwarders: string[];
            }, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                platform_fee_basis_points?: number | undefined;
                platform_fee_recipient?: string | undefined;
                trusted_forwarders?: string[] | undefined;
                name: string;
            }>;
            output: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodUnknown, {
                [x: string]: unknown;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
            }, {
                [x: string]: unknown;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
            }>;
            input: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
            }, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
            }>;
        };
        roles: readonly ["admin", "lister", "asset"];
        initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
            supportedChains?: {
                chainId: number;
                slug: string;
                rpc: string[];
                nativeCurrency: {
                    symbol: string;
                    name: string;
                    decimals: number;
                };
            }[] | undefined;
            thirdwebApiKey?: string | undefined;
            alchemyApiKey?: string | undefined;
            infuraApiKey?: string | undefined;
            readonlySettings?: {
                chainId?: number | undefined;
                rpcUrl: string;
            } | undefined;
            gasSettings?: {
                maxPriceInGwei?: number | undefined;
                speed?: "standard" | "fast" | "fastest" | undefined;
            } | undefined;
            gasless?: {
                experimentalChainlessSupport?: boolean | undefined;
                openzeppelin: {
                    relayerForwarderAddress?: string | undefined;
                    useEOAForwarder?: boolean | undefined;
                    relayerUrl: string;
                };
            } | {
                biconomy: {
                    deadlineSeconds?: number | undefined;
                    apiId: string;
                    apiKey: string;
                };
            } | undefined;
            gatewayUrls?: string[] | undefined;
        } | undefined) => Promise<import("./prebuilt-implementations/marketplacev3").MarketplaceV3>;
        getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
            [x: string]: any;
            name?: string | undefined;
            inputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            outputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
        }[]>;
    };
    readonly multiwrap: {
        name: "Multiwrap";
        contractType: "multiwrap";
        schema: {
            deploy: import("zod").ZodObject<{
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
                trusted_forwarders: string[];
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                trusted_forwarders?: string[] | undefined;
                name: string;
            }>;
            output: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodString>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                name: string;
            }>;
            input: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                name: string;
            }>;
        };
        roles: readonly ["admin", "transfer", "minter", "unwrap", "asset"];
        initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
            supportedChains?: {
                chainId: number;
                slug: string;
                rpc: string[];
                nativeCurrency: {
                    symbol: string;
                    name: string;
                    decimals: number;
                };
            }[] | undefined;
            thirdwebApiKey?: string | undefined;
            alchemyApiKey?: string | undefined;
            infuraApiKey?: string | undefined;
            readonlySettings?: {
                chainId?: number | undefined;
                rpcUrl: string;
            } | undefined;
            gasSettings?: {
                maxPriceInGwei?: number | undefined;
                speed?: "standard" | "fast" | "fastest" | undefined;
            } | undefined;
            gasless?: {
                experimentalChainlessSupport?: boolean | undefined;
                openzeppelin: {
                    relayerForwarderAddress?: string | undefined;
                    useEOAForwarder?: boolean | undefined;
                    relayerUrl: string;
                };
            } | {
                biconomy: {
                    deadlineSeconds?: number | undefined;
                    apiId: string;
                    apiKey: string;
                };
            } | undefined;
            gatewayUrls?: string[] | undefined;
        } | undefined) => Promise<import("./prebuilt-implementations/multiwrap").Multiwrap>;
        getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
            [x: string]: any;
            name?: string | undefined;
            inputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            outputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
        }[] | ({
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
            name?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: ({
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            } | {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            })[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            inputs: ({
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            } | {
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            })[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            stateMutability: string;
            type: string;
            inputs?: undefined;
            anonymous?: undefined;
            name?: undefined;
            outputs?: undefined;
        })[]>;
    };
    readonly "nft-collection": {
        name: "TokenERC721";
        contractType: "nft-collection";
        schema: {
            deploy: import("zod").ZodObject<{
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                primary_sale_recipient: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
                platform_fee_basis_points: number;
                platform_fee_recipient: string;
                primary_sale_recipient: string;
                trusted_forwarders: string[];
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                platform_fee_basis_points?: number | undefined;
                platform_fee_recipient?: string | undefined;
                trusted_forwarders?: string[] | undefined;
                name: string;
                primary_sale_recipient: string;
            }>;
            output: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodString>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                name: string;
            }>;
            input: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                name: string;
            }>;
        };
        roles: readonly ["admin", "minter", "transfer"];
        initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
            supportedChains?: {
                chainId: number;
                slug: string;
                rpc: string[];
                nativeCurrency: {
                    symbol: string;
                    name: string;
                    decimals: number;
                };
            }[] | undefined;
            thirdwebApiKey?: string | undefined;
            alchemyApiKey?: string | undefined;
            infuraApiKey?: string | undefined;
            readonlySettings?: {
                chainId?: number | undefined;
                rpcUrl: string;
            } | undefined;
            gasSettings?: {
                maxPriceInGwei?: number | undefined;
                speed?: "standard" | "fast" | "fastest" | undefined;
            } | undefined;
            gasless?: {
                experimentalChainlessSupport?: boolean | undefined;
                openzeppelin: {
                    relayerForwarderAddress?: string | undefined;
                    useEOAForwarder?: boolean | undefined;
                    relayerUrl: string;
                };
            } | {
                biconomy: {
                    deadlineSeconds?: number | undefined;
                    apiId: string;
                    apiKey: string;
                };
            } | undefined;
            gatewayUrls?: string[] | undefined;
        } | undefined) => Promise<import("./prebuilt-implementations/nft-collection").NFTCollection>;
        getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
            [x: string]: any;
            name?: string | undefined;
            inputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            outputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
        }[] | ({
            inputs: never[];
            stateMutability: string;
            type: string;
            name?: undefined;
            anonymous?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            type: string;
            stateMutability?: undefined;
            anonymous?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: ({
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            } | {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            })[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            inputs: ({
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            } | {
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            })[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        })[]>;
    };
    readonly "nft-drop": {
        name: "DropERC721";
        contractType: "nft-drop";
        schema: {
            deploy: import("zod").ZodObject<{
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                primary_sale_recipient: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
                merkle: Record<string, string>;
                platform_fee_basis_points: number;
                platform_fee_recipient: string;
                primary_sale_recipient: string;
                trusted_forwarders: string[];
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                merkle?: Record<string, string> | undefined;
                platform_fee_basis_points?: number | undefined;
                platform_fee_recipient?: string | undefined;
                trusted_forwarders?: string[] | undefined;
                name: string;
                primary_sale_recipient: string;
            }>;
            output: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodString>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
                merkle: Record<string, string>;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                merkle?: Record<string, string> | undefined;
                name: string;
            }>;
            input: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
                merkle: Record<string, string>;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                merkle?: Record<string, string> | undefined;
                name: string;
            }>;
        };
        roles: readonly ["admin", "minter", "transfer"];
        initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
            supportedChains?: {
                chainId: number;
                slug: string;
                rpc: string[];
                nativeCurrency: {
                    symbol: string;
                    name: string;
                    decimals: number;
                };
            }[] | undefined;
            thirdwebApiKey?: string | undefined;
            alchemyApiKey?: string | undefined;
            infuraApiKey?: string | undefined;
            readonlySettings?: {
                chainId?: number | undefined;
                rpcUrl: string;
            } | undefined;
            gasSettings?: {
                maxPriceInGwei?: number | undefined;
                speed?: "standard" | "fast" | "fastest" | undefined;
            } | undefined;
            gasless?: {
                experimentalChainlessSupport?: boolean | undefined;
                openzeppelin: {
                    relayerForwarderAddress?: string | undefined;
                    useEOAForwarder?: boolean | undefined;
                    relayerUrl: string;
                };
            } | {
                biconomy: {
                    deadlineSeconds?: number | undefined;
                    apiId: string;
                    apiKey: string;
                };
            } | undefined;
            gatewayUrls?: string[] | undefined;
        } | undefined) => Promise<import("./prebuilt-implementations/nft-drop").NFTDrop>;
        getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
            [x: string]: any;
            name?: string | undefined;
            inputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            outputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
        }[] | ({
            inputs: never[];
            stateMutability: string;
            type: string;
            name?: undefined;
            anonymous?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            type: string;
            stateMutability?: undefined;
            anonymous?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: ({
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            } | {
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            })[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            inputs: ({
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            } | {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            })[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        })[] | ({
            inputs: never[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
            name?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: {
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            inputs: ({
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            } | {
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            })[];
            name: string;
            outputs: never[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        })[]>;
    };
    readonly pack: {
        name: "Pack";
        contractType: "pack";
        schema: {
            deploy: import("zod").ZodObject<{
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
                platform_fee_basis_points: number;
                platform_fee_recipient: string;
                trusted_forwarders: string[];
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                platform_fee_basis_points?: number | undefined;
                platform_fee_recipient?: string | undefined;
                trusted_forwarders?: string[] | undefined;
                name: string;
            }>;
            output: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodString>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                name: string;
            }>;
            input: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                name: string;
            }>;
        };
        roles: readonly ["admin", "minter", "asset", "transfer"];
        initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
            supportedChains?: {
                chainId: number;
                slug: string;
                rpc: string[];
                nativeCurrency: {
                    symbol: string;
                    name: string;
                    decimals: number;
                };
            }[] | undefined;
            thirdwebApiKey?: string | undefined;
            alchemyApiKey?: string | undefined;
            infuraApiKey?: string | undefined;
            readonlySettings?: {
                chainId?: number | undefined;
                rpcUrl: string;
            } | undefined;
            gasSettings?: {
                maxPriceInGwei?: number | undefined;
                speed?: "standard" | "fast" | "fastest" | undefined;
            } | undefined;
            gasless?: {
                experimentalChainlessSupport?: boolean | undefined;
                openzeppelin: {
                    relayerForwarderAddress?: string | undefined;
                    useEOAForwarder?: boolean | undefined;
                    relayerUrl: string;
                };
            } | {
                biconomy: {
                    deadlineSeconds?: number | undefined;
                    apiId: string;
                    apiKey: string;
                };
            } | undefined;
            gatewayUrls?: string[] | undefined;
        } | undefined) => Promise<import("./prebuilt-implementations/pack").Pack>;
        getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<Abi>;
    };
    readonly "signature-drop": {
        name: "SignatureDrop";
        contractType: "signature-drop";
        schema: {
            deploy: import("zod").ZodObject<{
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                primary_sale_recipient: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
                merkle: Record<string, string>;
                platform_fee_basis_points: number;
                platform_fee_recipient: string;
                primary_sale_recipient: string;
                trusted_forwarders: string[];
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                merkle?: Record<string, string> | undefined;
                platform_fee_basis_points?: number | undefined;
                platform_fee_recipient?: string | undefined;
                trusted_forwarders?: string[] | undefined;
                name: string;
                primary_sale_recipient: string;
            }>;
            output: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodString>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
                merkle: Record<string, string>;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                merkle?: Record<string, string> | undefined;
                name: string;
            }>;
            input: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
                merkle: Record<string, string>;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                merkle?: Record<string, string> | undefined;
                name: string;
            }>;
        };
        roles: readonly ["admin", "minter", "transfer"];
        initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
            supportedChains?: {
                chainId: number;
                slug: string;
                rpc: string[];
                nativeCurrency: {
                    symbol: string;
                    name: string;
                    decimals: number;
                };
            }[] | undefined;
            thirdwebApiKey?: string | undefined;
            alchemyApiKey?: string | undefined;
            infuraApiKey?: string | undefined;
            readonlySettings?: {
                chainId?: number | undefined;
                rpcUrl: string;
            } | undefined;
            gasSettings?: {
                maxPriceInGwei?: number | undefined;
                speed?: "standard" | "fast" | "fastest" | undefined;
            } | undefined;
            gasless?: {
                experimentalChainlessSupport?: boolean | undefined;
                openzeppelin: {
                    relayerForwarderAddress?: string | undefined;
                    useEOAForwarder?: boolean | undefined;
                    relayerUrl: string;
                };
            } | {
                biconomy: {
                    deadlineSeconds?: number | undefined;
                    apiId: string;
                    apiKey: string;
                };
            } | undefined;
            gatewayUrls?: string[] | undefined;
        } | undefined) => Promise<import("./prebuilt-implementations/signature-drop").SignatureDrop>;
        getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
            [x: string]: any;
            name?: string | undefined;
            inputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            outputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
        }[] | ({
            inputs: never[];
            name: string;
            type: string;
            anonymous?: undefined;
            outputs?: undefined;
            stateMutability?: undefined;
        } | {
            anonymous: boolean;
            inputs: ({
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            } | {
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            })[];
            name: string;
            type: string;
            outputs?: undefined;
            stateMutability?: undefined;
        } | {
            inputs: ({
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            } | {
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            })[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        })[]>;
    };
    readonly split: {
        name: "Split";
        contractType: "split";
        schema: {
            deploy: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                recipients: import("zod").ZodEffects<import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodObject<{
                    address: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                    sharesBps: import("zod").ZodNumber;
                }, "strip", import("zod").ZodTypeAny, {
                    address: string;
                    sharesBps: number;
                }, {
                    address: string;
                    sharesBps: number;
                }>, "many">>, {
                    address: string;
                    sharesBps: number;
                }[], {
                    address: string;
                    sharesBps: number;
                }[] | undefined>;
                trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
                trusted_forwarders: string[];
                recipients: {
                    address: string;
                    sharesBps: number;
                }[];
            }, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                trusted_forwarders?: string[] | undefined;
                recipients?: {
                    address: string;
                    sharesBps: number;
                }[] | undefined;
                name: string;
            }>;
            output: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodString>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                recipients: import("zod").ZodArray<import("zod").ZodObject<{
                    address: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                    sharesBps: import("zod").ZodNumber;
                }, "strip", import("zod").ZodTypeAny, {
                    address: string;
                    sharesBps: number;
                }, {
                    address: string;
                    sharesBps: number;
                }>, "many">;
            }, "strip", import("zod").ZodUnknown, {
                [x: string]: unknown;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
                recipients: {
                    address: string;
                    sharesBps: number;
                }[];
            }, {
                [x: string]: unknown;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
                recipients: {
                    address: string;
                    sharesBps: number;
                }[];
            }>;
            input: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                recipients: import("zod").ZodEffects<import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodObject<{
                    address: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                    sharesBps: import("zod").ZodNumber;
                }, "strip", import("zod").ZodTypeAny, {
                    address: string;
                    sharesBps: number;
                }, {
                    address: string;
                    sharesBps: number;
                }>, "many">>, {
                    address: string;
                    sharesBps: number;
                }[], {
                    address: string;
                    sharesBps: number;
                }[] | undefined>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
                recipients: {
                    address: string;
                    sharesBps: number;
                }[];
            }, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                recipients?: {
                    address: string;
                    sharesBps: number;
                }[] | undefined;
                name: string;
            }>;
        };
        roles: readonly ["admin"];
        initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
            supportedChains?: {
                chainId: number;
                slug: string;
                rpc: string[];
                nativeCurrency: {
                    symbol: string;
                    name: string;
                    decimals: number;
                };
            }[] | undefined;
            thirdwebApiKey?: string | undefined;
            alchemyApiKey?: string | undefined;
            infuraApiKey?: string | undefined;
            readonlySettings?: {
                chainId?: number | undefined;
                rpcUrl: string;
            } | undefined;
            gasSettings?: {
                maxPriceInGwei?: number | undefined;
                speed?: "standard" | "fast" | "fastest" | undefined;
            } | undefined;
            gasless?: {
                experimentalChainlessSupport?: boolean | undefined;
                openzeppelin: {
                    relayerForwarderAddress?: string | undefined;
                    useEOAForwarder?: boolean | undefined;
                    relayerUrl: string;
                };
            } | {
                biconomy: {
                    deadlineSeconds?: number | undefined;
                    apiId: string;
                    apiKey: string;
                };
            } | undefined;
            gatewayUrls?: string[] | undefined;
        } | undefined) => Promise<import("./prebuilt-implementations/split").Split>;
        getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
            [x: string]: any;
            name?: string | undefined;
            inputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            outputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
        }[] | ({
            inputs: never[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
            name?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: {
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            stateMutability: string;
            type: string;
            inputs?: undefined;
            anonymous?: undefined;
            name?: undefined;
            outputs?: undefined;
        })[]>;
    };
    readonly "token-drop": {
        name: "DropERC20";
        contractType: "token-drop";
        schema: {
            deploy: import("zod").ZodObject<{
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                primary_sale_recipient: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                merkle: Record<string, string>;
                platform_fee_basis_points: number;
                platform_fee_recipient: string;
                primary_sale_recipient: string;
                trusted_forwarders: string[];
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                merkle?: Record<string, string> | undefined;
                platform_fee_basis_points?: number | undefined;
                platform_fee_recipient?: string | undefined;
                trusted_forwarders?: string[] | undefined;
                name: string;
                primary_sale_recipient: string;
            }>;
            output: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodString>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                merkle: Record<string, string>;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                merkle?: Record<string, string> | undefined;
                name: string;
            }>;
            input: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                merkle: Record<string, string>;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                merkle?: Record<string, string> | undefined;
                name: string;
            }>;
        };
        roles: readonly ["admin", "transfer"];
        initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
            supportedChains?: {
                chainId: number;
                slug: string;
                rpc: string[];
                nativeCurrency: {
                    symbol: string;
                    name: string;
                    decimals: number;
                };
            }[] | undefined;
            thirdwebApiKey?: string | undefined;
            alchemyApiKey?: string | undefined;
            infuraApiKey?: string | undefined;
            readonlySettings?: {
                chainId?: number | undefined;
                rpcUrl: string;
            } | undefined;
            gasSettings?: {
                maxPriceInGwei?: number | undefined;
                speed?: "standard" | "fast" | "fastest" | undefined;
            } | undefined;
            gasless?: {
                experimentalChainlessSupport?: boolean | undefined;
                openzeppelin: {
                    relayerForwarderAddress?: string | undefined;
                    useEOAForwarder?: boolean | undefined;
                    relayerUrl: string;
                };
            } | {
                biconomy: {
                    deadlineSeconds?: number | undefined;
                    apiId: string;
                    apiKey: string;
                };
            } | undefined;
            gatewayUrls?: string[] | undefined;
        } | undefined) => Promise<import("./prebuilt-implementations/token-drop").TokenDrop>;
        getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
            [x: string]: any;
            name?: string | undefined;
            inputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            outputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
        }[] | ({
            inputs: never[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
            name?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: {
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            inputs: ({
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            } | {
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            })[];
            name: string;
            outputs: never[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        })[]>;
    };
    readonly token: {
        name: "TokenERC20";
        contractType: "token";
        schema: {
            deploy: import("zod").ZodObject<{
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                primary_sale_recipient: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                platform_fee_basis_points: number;
                platform_fee_recipient: string;
                primary_sale_recipient: string;
                trusted_forwarders: string[];
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                platform_fee_basis_points?: number | undefined;
                platform_fee_recipient?: string | undefined;
                trusted_forwarders?: string[] | undefined;
                name: string;
                primary_sale_recipient: string;
            }>;
            output: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodString>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
            }>;
            input: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
            }>;
        };
        roles: readonly ["admin", "minter", "transfer"];
        initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
            supportedChains?: {
                chainId: number;
                slug: string;
                rpc: string[];
                nativeCurrency: {
                    symbol: string;
                    name: string;
                    decimals: number;
                };
            }[] | undefined;
            thirdwebApiKey?: string | undefined;
            alchemyApiKey?: string | undefined;
            infuraApiKey?: string | undefined;
            readonlySettings?: {
                chainId?: number | undefined;
                rpcUrl: string;
            } | undefined;
            gasSettings?: {
                maxPriceInGwei?: number | undefined;
                speed?: "standard" | "fast" | "fastest" | undefined;
            } | undefined;
            gasless?: {
                experimentalChainlessSupport?: boolean | undefined;
                openzeppelin: {
                    relayerForwarderAddress?: string | undefined;
                    useEOAForwarder?: boolean | undefined;
                    relayerUrl: string;
                };
            } | {
                biconomy: {
                    deadlineSeconds?: number | undefined;
                    apiId: string;
                    apiKey: string;
                };
            } | undefined;
            gatewayUrls?: string[] | undefined;
        } | undefined) => Promise<import("./prebuilt-implementations/token").Token>;
        getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
            [x: string]: any;
            name?: string | undefined;
            inputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            outputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
        }[] | ({
            inputs: never[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
            name?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: ({
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            } | {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            })[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            inputs: ({
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            } | {
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            })[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        })[]>;
    };
    readonly vote: {
        name: "VoteERC20";
        contractType: "vote";
        schema: {
            deploy: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                voting_delay_in_blocks: import("zod").ZodDefault<import("zod").ZodNumber>;
                voting_period_in_blocks: import("zod").ZodDefault<import("zod").ZodNumber>;
                voting_token_address: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                voting_quorum_fraction: import("zod").ZodDefault<import("zod").ZodNumber>;
                proposal_token_threshold: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBigInt, import("zod").ZodType<ethers.BigNumber, import("zod").ZodTypeDef, ethers.BigNumber>]>, ethers.BigNumber, string | number | bigint | ethers.BigNumber>, string, string | number | bigint | ethers.BigNumber>>;
                trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
                trusted_forwarders: string[];
                voting_delay_in_blocks: number;
                voting_period_in_blocks: number;
                voting_token_address: string;
                voting_quorum_fraction: number;
                proposal_token_threshold: string;
            }, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                trusted_forwarders?: string[] | undefined;
                voting_delay_in_blocks?: number | undefined;
                voting_period_in_blocks?: number | undefined;
                voting_quorum_fraction?: number | undefined;
                proposal_token_threshold?: string | number | bigint | ethers.BigNumber | undefined;
                name: string;
                voting_token_address: string;
            }>;
            output: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodString>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                voting_delay_in_blocks: import("zod").ZodDefault<import("zod").ZodNumber>;
                voting_period_in_blocks: import("zod").ZodDefault<import("zod").ZodNumber>;
                voting_token_address: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                voting_quorum_fraction: import("zod").ZodDefault<import("zod").ZodNumber>;
                proposal_token_threshold: import("zod").ZodEffects<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBigInt, import("zod").ZodType<ethers.BigNumber, import("zod").ZodTypeDef, ethers.BigNumber>]>, ethers.BigNumber, string | number | bigint | ethers.BigNumber>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
                voting_delay_in_blocks: number;
                voting_period_in_blocks: number;
                voting_token_address: string;
                voting_quorum_fraction: number;
                proposal_token_threshold: ethers.BigNumber;
            }, {
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                voting_delay_in_blocks?: number | undefined;
                voting_period_in_blocks?: number | undefined;
                voting_quorum_fraction?: number | undefined;
                name: string;
                voting_token_address: string;
                proposal_token_threshold: string | number | bigint | ethers.BigNumber;
            }>;
            input: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                voting_delay_in_blocks: import("zod").ZodDefault<import("zod").ZodNumber>;
                voting_period_in_blocks: import("zod").ZodDefault<import("zod").ZodNumber>;
                voting_token_address: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                voting_quorum_fraction: import("zod").ZodDefault<import("zod").ZodNumber>;
                proposal_token_threshold: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBigInt, import("zod").ZodType<ethers.BigNumber, import("zod").ZodTypeDef, ethers.BigNumber>]>, ethers.BigNumber, string | number | bigint | ethers.BigNumber>, string, string | number | bigint | ethers.BigNumber>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
                voting_delay_in_blocks: number;
                voting_period_in_blocks: number;
                voting_token_address: string;
                voting_quorum_fraction: number;
                proposal_token_threshold: string;
            }, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                voting_delay_in_blocks?: number | undefined;
                voting_period_in_blocks?: number | undefined;
                voting_quorum_fraction?: number | undefined;
                proposal_token_threshold?: string | number | bigint | ethers.BigNumber | undefined;
                name: string;
                voting_token_address: string;
            }>;
        };
        roles: readonly [];
        initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
            supportedChains?: {
                chainId: number;
                slug: string;
                rpc: string[];
                nativeCurrency: {
                    symbol: string;
                    name: string;
                    decimals: number;
                };
            }[] | undefined;
            thirdwebApiKey?: string | undefined;
            alchemyApiKey?: string | undefined;
            infuraApiKey?: string | undefined;
            readonlySettings?: {
                chainId?: number | undefined;
                rpcUrl: string;
            } | undefined;
            gasSettings?: {
                maxPriceInGwei?: number | undefined;
                speed?: "standard" | "fast" | "fastest" | undefined;
            } | undefined;
            gasless?: {
                experimentalChainlessSupport?: boolean | undefined;
                openzeppelin: {
                    relayerForwarderAddress?: string | undefined;
                    useEOAForwarder?: boolean | undefined;
                    relayerUrl: string;
                };
            } | {
                biconomy: {
                    deadlineSeconds?: number | undefined;
                    apiId: string;
                    apiKey: string;
                };
            } | undefined;
            gatewayUrls?: string[] | undefined;
        } | undefined) => Promise<import("./prebuilt-implementations/vote").Vote>;
        getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
            [x: string]: any;
            name?: string | undefined;
            inputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            outputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
        }[] | ({
            inputs: never[];
            stateMutability: string;
            type: string;
            name?: undefined;
            anonymous?: undefined;
            outputs?: undefined;
        } | {
            inputs: never[];
            name: string;
            type: string;
            stateMutability?: undefined;
            anonymous?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: {
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            inputs: never[];
            name: string;
            outputs: {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            stateMutability: string;
            type: string;
            inputs?: undefined;
            name?: undefined;
            anonymous?: undefined;
            outputs?: undefined;
        })[]>;
    };
};
export declare const PREBUILT_CONTRACTS_APPURI_MAP: {
    readonly "edition-drop": "ipfs://QmbAgC8YwY36n8H2kuvSWsRisxDZ15QZw3xGZyk9aDvcv7/erc1155.html";
    readonly edition: "";
    readonly marketplace: "ipfs://QmbAgC8YwY36n8H2kuvSWsRisxDZ15QZw3xGZyk9aDvcv7/marketplace.html";
    readonly "marketplace-v3": "ipfs://QmbAgC8YwY36n8H2kuvSWsRisxDZ15QZw3xGZyk9aDvcv7/marketplace-v3.html";
    readonly multiwrap: "";
    readonly "nft-collection": "";
    readonly "nft-drop": "ipfs://QmbAgC8YwY36n8H2kuvSWsRisxDZ15QZw3xGZyk9aDvcv7/erc721.html";
    readonly pack: "";
    readonly "signature-drop": "ipfs://QmbAgC8YwY36n8H2kuvSWsRisxDZ15QZw3xGZyk9aDvcv7/erc721.html";
    readonly split: "";
    readonly "token-drop": "ipfs://QmbAgC8YwY36n8H2kuvSWsRisxDZ15QZw3xGZyk9aDvcv7/erc20.html";
    readonly token: "";
    readonly vote: "";
};
export declare const CONTRACTS_MAP: {
    readonly custom: {
        name: "SmartContract";
        contractType: "custom";
        schema: {};
        roles: ("admin" | "minter" | "transfer" | "lister" | "asset" | "unwrap" | "pauser" | "factory")[];
    };
    readonly "edition-drop": {
        name: "DropERC1155";
        contractType: "edition-drop";
        schema: {
            deploy: import("zod").ZodObject<{
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                primary_sale_recipient: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
                merkle: Record<string, string>;
                platform_fee_basis_points: number;
                platform_fee_recipient: string;
                primary_sale_recipient: string;
                trusted_forwarders: string[];
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                merkle?: Record<string, string> | undefined;
                platform_fee_basis_points?: number | undefined;
                platform_fee_recipient?: string | undefined;
                trusted_forwarders?: string[] | undefined;
                name: string;
                primary_sale_recipient: string;
            }>;
            output: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodString>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
                merkle: Record<string, string>;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                merkle?: Record<string, string> | undefined;
                name: string;
            }>;
            input: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
                merkle: Record<string, string>;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                merkle?: Record<string, string> | undefined;
                name: string;
            }>;
        };
        roles: readonly ["admin", "minter", "transfer"];
        initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
            supportedChains?: {
                chainId: number;
                slug: string;
                rpc: string[];
                nativeCurrency: {
                    symbol: string;
                    name: string;
                    decimals: number;
                };
            }[] | undefined;
            thirdwebApiKey?: string | undefined;
            alchemyApiKey?: string | undefined;
            infuraApiKey?: string | undefined;
            readonlySettings?: {
                chainId?: number | undefined;
                rpcUrl: string;
            } | undefined;
            gasSettings?: {
                maxPriceInGwei?: number | undefined;
                speed?: "standard" | "fast" | "fastest" | undefined;
            } | undefined;
            gasless?: {
                experimentalChainlessSupport?: boolean | undefined;
                openzeppelin: {
                    relayerForwarderAddress?: string | undefined;
                    useEOAForwarder?: boolean | undefined;
                    relayerUrl: string;
                };
            } | {
                biconomy: {
                    deadlineSeconds?: number | undefined;
                    apiId: string;
                    apiKey: string;
                };
            } | undefined;
            gatewayUrls?: string[] | undefined;
        } | undefined) => Promise<import("./prebuilt-implementations/edition-drop").EditionDrop>;
        getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
            [x: string]: any;
            name?: string | undefined;
            inputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            outputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
        }[] | ({
            inputs: never[];
            stateMutability: string;
            type: string;
            name?: undefined;
            anonymous?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            type: string;
            stateMutability?: undefined;
            anonymous?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: ({
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            } | {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            })[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            inputs: ({
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            } | {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            })[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        })[] | ({
            inputs: never[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
            name?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: ({
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            } | {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            })[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            inputs: ({
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            } | {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            })[];
            name: string;
            outputs: never[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        })[]>;
    };
    readonly edition: {
        name: "TokenERC1155";
        contractType: "edition";
        schema: {
            deploy: import("zod").ZodObject<{
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                primary_sale_recipient: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
                platform_fee_basis_points: number;
                platform_fee_recipient: string;
                primary_sale_recipient: string;
                trusted_forwarders: string[];
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                platform_fee_basis_points?: number | undefined;
                platform_fee_recipient?: string | undefined;
                trusted_forwarders?: string[] | undefined;
                name: string;
                primary_sale_recipient: string;
            }>;
            output: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodString>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                name: string;
            }>;
            input: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                name: string;
            }>;
        };
        roles: readonly ["admin", "minter", "transfer"];
        initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
            supportedChains?: {
                chainId: number;
                slug: string;
                rpc: string[];
                nativeCurrency: {
                    symbol: string;
                    name: string;
                    decimals: number;
                };
            }[] | undefined;
            thirdwebApiKey?: string | undefined;
            alchemyApiKey?: string | undefined;
            infuraApiKey?: string | undefined;
            readonlySettings?: {
                chainId?: number | undefined;
                rpcUrl: string;
            } | undefined;
            gasSettings?: {
                maxPriceInGwei?: number | undefined;
                speed?: "standard" | "fast" | "fastest" | undefined;
            } | undefined;
            gasless?: {
                experimentalChainlessSupport?: boolean | undefined;
                openzeppelin: {
                    relayerForwarderAddress?: string | undefined;
                    useEOAForwarder?: boolean | undefined;
                    relayerUrl: string;
                };
            } | {
                biconomy: {
                    deadlineSeconds?: number | undefined;
                    apiId: string;
                    apiKey: string;
                };
            } | undefined;
            gatewayUrls?: string[] | undefined;
        } | undefined) => Promise<import("./prebuilt-implementations/edition").Edition>;
        getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
            [x: string]: any;
            name?: string | undefined;
            inputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            outputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
        }[] | ({
            inputs: never[];
            stateMutability: string;
            type: string;
            name?: undefined;
            anonymous?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            type: string;
            stateMutability?: undefined;
            anonymous?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: ({
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            } | {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            })[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            inputs: ({
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            } | {
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            })[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        })[]>;
    };
    readonly marketplace: {
        name: "Marketplace";
        contractType: "marketplace";
        schema: {
            deploy: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
                platform_fee_basis_points: number;
                platform_fee_recipient: string;
                trusted_forwarders: string[];
            }, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                platform_fee_basis_points?: number | undefined;
                platform_fee_recipient?: string | undefined;
                trusted_forwarders?: string[] | undefined;
                name: string;
            }>;
            output: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodUnknown, {
                [x: string]: unknown;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
            }, {
                [x: string]: unknown;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
            }>;
            input: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
            }, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
            }>;
        };
        roles: readonly ["admin", "lister", "asset"];
        initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
            supportedChains?: {
                chainId: number;
                slug: string;
                rpc: string[];
                nativeCurrency: {
                    symbol: string;
                    name: string;
                    decimals: number;
                };
            }[] | undefined;
            thirdwebApiKey?: string | undefined;
            alchemyApiKey?: string | undefined;
            infuraApiKey?: string | undefined;
            readonlySettings?: {
                chainId?: number | undefined;
                rpcUrl: string;
            } | undefined;
            gasSettings?: {
                maxPriceInGwei?: number | undefined;
                speed?: "standard" | "fast" | "fastest" | undefined;
            } | undefined;
            gasless?: {
                experimentalChainlessSupport?: boolean | undefined;
                openzeppelin: {
                    relayerForwarderAddress?: string | undefined;
                    useEOAForwarder?: boolean | undefined;
                    relayerUrl: string;
                };
            } | {
                biconomy: {
                    deadlineSeconds?: number | undefined;
                    apiId: string;
                    apiKey: string;
                };
            } | undefined;
            gatewayUrls?: string[] | undefined;
        } | undefined) => Promise<import("./prebuilt-implementations/marketplace").Marketplace>;
        getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
            [x: string]: any;
            name?: string | undefined;
            inputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            outputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
        }[] | ({
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
            name?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: ({
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            } | {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            })[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: never[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            stateMutability: string;
            type: string;
            inputs?: undefined;
            anonymous?: undefined;
            name?: undefined;
            outputs?: undefined;
        })[]>;
    };
    readonly "marketplace-v3": {
        name: "MarketplaceRouter";
        contractType: "marketplace-v3";
        schema: {
            deploy: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
                platform_fee_basis_points: number;
                platform_fee_recipient: string;
                trusted_forwarders: string[];
            }, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                platform_fee_basis_points?: number | undefined;
                platform_fee_recipient?: string | undefined;
                trusted_forwarders?: string[] | undefined;
                name: string;
            }>;
            output: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodUnknown, {
                [x: string]: unknown;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
            }, {
                [x: string]: unknown;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
            }>;
            input: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
            }, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
            }>;
        };
        roles: readonly ["admin", "lister", "asset"];
        initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
            supportedChains?: {
                chainId: number;
                slug: string;
                rpc: string[];
                nativeCurrency: {
                    symbol: string;
                    name: string;
                    decimals: number;
                };
            }[] | undefined;
            thirdwebApiKey?: string | undefined;
            alchemyApiKey?: string | undefined;
            infuraApiKey?: string | undefined;
            readonlySettings?: {
                chainId?: number | undefined;
                rpcUrl: string;
            } | undefined;
            gasSettings?: {
                maxPriceInGwei?: number | undefined;
                speed?: "standard" | "fast" | "fastest" | undefined;
            } | undefined;
            gasless?: {
                experimentalChainlessSupport?: boolean | undefined;
                openzeppelin: {
                    relayerForwarderAddress?: string | undefined;
                    useEOAForwarder?: boolean | undefined;
                    relayerUrl: string;
                };
            } | {
                biconomy: {
                    deadlineSeconds?: number | undefined;
                    apiId: string;
                    apiKey: string;
                };
            } | undefined;
            gatewayUrls?: string[] | undefined;
        } | undefined) => Promise<import("./prebuilt-implementations/marketplacev3").MarketplaceV3>;
        getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
            [x: string]: any;
            name?: string | undefined;
            inputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            outputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
        }[]>;
    };
    readonly multiwrap: {
        name: "Multiwrap";
        contractType: "multiwrap";
        schema: {
            deploy: import("zod").ZodObject<{
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
                trusted_forwarders: string[];
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                trusted_forwarders?: string[] | undefined;
                name: string;
            }>;
            output: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodString>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                name: string;
            }>;
            input: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                name: string;
            }>;
        };
        roles: readonly ["admin", "transfer", "minter", "unwrap", "asset"];
        initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
            supportedChains?: {
                chainId: number;
                slug: string;
                rpc: string[];
                nativeCurrency: {
                    symbol: string;
                    name: string;
                    decimals: number;
                };
            }[] | undefined;
            thirdwebApiKey?: string | undefined;
            alchemyApiKey?: string | undefined;
            infuraApiKey?: string | undefined;
            readonlySettings?: {
                chainId?: number | undefined;
                rpcUrl: string;
            } | undefined;
            gasSettings?: {
                maxPriceInGwei?: number | undefined;
                speed?: "standard" | "fast" | "fastest" | undefined;
            } | undefined;
            gasless?: {
                experimentalChainlessSupport?: boolean | undefined;
                openzeppelin: {
                    relayerForwarderAddress?: string | undefined;
                    useEOAForwarder?: boolean | undefined;
                    relayerUrl: string;
                };
            } | {
                biconomy: {
                    deadlineSeconds?: number | undefined;
                    apiId: string;
                    apiKey: string;
                };
            } | undefined;
            gatewayUrls?: string[] | undefined;
        } | undefined) => Promise<import("./prebuilt-implementations/multiwrap").Multiwrap>;
        getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
            [x: string]: any;
            name?: string | undefined;
            inputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            outputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
        }[] | ({
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
            name?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: ({
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            } | {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            })[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            inputs: ({
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            } | {
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            })[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            stateMutability: string;
            type: string;
            inputs?: undefined;
            anonymous?: undefined;
            name?: undefined;
            outputs?: undefined;
        })[]>;
    };
    readonly "nft-collection": {
        name: "TokenERC721";
        contractType: "nft-collection";
        schema: {
            deploy: import("zod").ZodObject<{
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                primary_sale_recipient: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
                platform_fee_basis_points: number;
                platform_fee_recipient: string;
                primary_sale_recipient: string;
                trusted_forwarders: string[];
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                platform_fee_basis_points?: number | undefined;
                platform_fee_recipient?: string | undefined;
                trusted_forwarders?: string[] | undefined;
                name: string;
                primary_sale_recipient: string;
            }>;
            output: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodString>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                name: string;
            }>;
            input: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                name: string;
            }>;
        };
        roles: readonly ["admin", "minter", "transfer"];
        initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
            supportedChains?: {
                chainId: number;
                slug: string;
                rpc: string[];
                nativeCurrency: {
                    symbol: string;
                    name: string;
                    decimals: number;
                };
            }[] | undefined;
            thirdwebApiKey?: string | undefined;
            alchemyApiKey?: string | undefined;
            infuraApiKey?: string | undefined;
            readonlySettings?: {
                chainId?: number | undefined;
                rpcUrl: string;
            } | undefined;
            gasSettings?: {
                maxPriceInGwei?: number | undefined;
                speed?: "standard" | "fast" | "fastest" | undefined;
            } | undefined;
            gasless?: {
                experimentalChainlessSupport?: boolean | undefined;
                openzeppelin: {
                    relayerForwarderAddress?: string | undefined;
                    useEOAForwarder?: boolean | undefined;
                    relayerUrl: string;
                };
            } | {
                biconomy: {
                    deadlineSeconds?: number | undefined;
                    apiId: string;
                    apiKey: string;
                };
            } | undefined;
            gatewayUrls?: string[] | undefined;
        } | undefined) => Promise<import("./prebuilt-implementations/nft-collection").NFTCollection>;
        getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
            [x: string]: any;
            name?: string | undefined;
            inputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            outputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
        }[] | ({
            inputs: never[];
            stateMutability: string;
            type: string;
            name?: undefined;
            anonymous?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            type: string;
            stateMutability?: undefined;
            anonymous?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: ({
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            } | {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            })[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            inputs: ({
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            } | {
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            })[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        })[]>;
    };
    readonly "nft-drop": {
        name: "DropERC721";
        contractType: "nft-drop";
        schema: {
            deploy: import("zod").ZodObject<{
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                primary_sale_recipient: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
                merkle: Record<string, string>;
                platform_fee_basis_points: number;
                platform_fee_recipient: string;
                primary_sale_recipient: string;
                trusted_forwarders: string[];
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                merkle?: Record<string, string> | undefined;
                platform_fee_basis_points?: number | undefined;
                platform_fee_recipient?: string | undefined;
                trusted_forwarders?: string[] | undefined;
                name: string;
                primary_sale_recipient: string;
            }>;
            output: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodString>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
                merkle: Record<string, string>;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                merkle?: Record<string, string> | undefined;
                name: string;
            }>;
            input: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
                merkle: Record<string, string>;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                merkle?: Record<string, string> | undefined;
                name: string;
            }>;
        };
        roles: readonly ["admin", "minter", "transfer"];
        initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
            supportedChains?: {
                chainId: number;
                slug: string;
                rpc: string[];
                nativeCurrency: {
                    symbol: string;
                    name: string;
                    decimals: number;
                };
            }[] | undefined;
            thirdwebApiKey?: string | undefined;
            alchemyApiKey?: string | undefined;
            infuraApiKey?: string | undefined;
            readonlySettings?: {
                chainId?: number | undefined;
                rpcUrl: string;
            } | undefined;
            gasSettings?: {
                maxPriceInGwei?: number | undefined;
                speed?: "standard" | "fast" | "fastest" | undefined;
            } | undefined;
            gasless?: {
                experimentalChainlessSupport?: boolean | undefined;
                openzeppelin: {
                    relayerForwarderAddress?: string | undefined;
                    useEOAForwarder?: boolean | undefined;
                    relayerUrl: string;
                };
            } | {
                biconomy: {
                    deadlineSeconds?: number | undefined;
                    apiId: string;
                    apiKey: string;
                };
            } | undefined;
            gatewayUrls?: string[] | undefined;
        } | undefined) => Promise<import("./prebuilt-implementations/nft-drop").NFTDrop>;
        getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
            [x: string]: any;
            name?: string | undefined;
            inputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            outputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
        }[] | ({
            inputs: never[];
            stateMutability: string;
            type: string;
            name?: undefined;
            anonymous?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            type: string;
            stateMutability?: undefined;
            anonymous?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: ({
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            } | {
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            })[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            inputs: ({
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            } | {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            })[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        })[] | ({
            inputs: never[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
            name?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: {
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            inputs: ({
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            } | {
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            })[];
            name: string;
            outputs: never[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        })[]>;
    };
    readonly pack: {
        name: "Pack";
        contractType: "pack";
        schema: {
            deploy: import("zod").ZodObject<{
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
                platform_fee_basis_points: number;
                platform_fee_recipient: string;
                trusted_forwarders: string[];
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                platform_fee_basis_points?: number | undefined;
                platform_fee_recipient?: string | undefined;
                trusted_forwarders?: string[] | undefined;
                name: string;
            }>;
            output: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodString>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                name: string;
            }>;
            input: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                name: string;
            }>;
        };
        roles: readonly ["admin", "minter", "asset", "transfer"];
        initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
            supportedChains?: {
                chainId: number;
                slug: string;
                rpc: string[];
                nativeCurrency: {
                    symbol: string;
                    name: string;
                    decimals: number;
                };
            }[] | undefined;
            thirdwebApiKey?: string | undefined;
            alchemyApiKey?: string | undefined;
            infuraApiKey?: string | undefined;
            readonlySettings?: {
                chainId?: number | undefined;
                rpcUrl: string;
            } | undefined;
            gasSettings?: {
                maxPriceInGwei?: number | undefined;
                speed?: "standard" | "fast" | "fastest" | undefined;
            } | undefined;
            gasless?: {
                experimentalChainlessSupport?: boolean | undefined;
                openzeppelin: {
                    relayerForwarderAddress?: string | undefined;
                    useEOAForwarder?: boolean | undefined;
                    relayerUrl: string;
                };
            } | {
                biconomy: {
                    deadlineSeconds?: number | undefined;
                    apiId: string;
                    apiKey: string;
                };
            } | undefined;
            gatewayUrls?: string[] | undefined;
        } | undefined) => Promise<import("./prebuilt-implementations/pack").Pack>;
        getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<Abi>;
    };
    readonly "signature-drop": {
        name: "SignatureDrop";
        contractType: "signature-drop";
        schema: {
            deploy: import("zod").ZodObject<{
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                primary_sale_recipient: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
                merkle: Record<string, string>;
                platform_fee_basis_points: number;
                platform_fee_recipient: string;
                primary_sale_recipient: string;
                trusted_forwarders: string[];
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                merkle?: Record<string, string> | undefined;
                platform_fee_basis_points?: number | undefined;
                platform_fee_recipient?: string | undefined;
                trusted_forwarders?: string[] | undefined;
                name: string;
                primary_sale_recipient: string;
            }>;
            output: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodString>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
                merkle: Record<string, string>;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                merkle?: Record<string, string> | undefined;
                name: string;
            }>;
            input: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                seller_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                seller_fee_basis_points: number;
                fee_recipient: string;
                merkle: Record<string, string>;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                seller_fee_basis_points?: number | undefined;
                fee_recipient?: string | undefined;
                merkle?: Record<string, string> | undefined;
                name: string;
            }>;
        };
        roles: readonly ["admin", "minter", "transfer"];
        initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
            supportedChains?: {
                chainId: number;
                slug: string;
                rpc: string[];
                nativeCurrency: {
                    symbol: string;
                    name: string;
                    decimals: number;
                };
            }[] | undefined;
            thirdwebApiKey?: string | undefined;
            alchemyApiKey?: string | undefined;
            infuraApiKey?: string | undefined;
            readonlySettings?: {
                chainId?: number | undefined;
                rpcUrl: string;
            } | undefined;
            gasSettings?: {
                maxPriceInGwei?: number | undefined;
                speed?: "standard" | "fast" | "fastest" | undefined;
            } | undefined;
            gasless?: {
                experimentalChainlessSupport?: boolean | undefined;
                openzeppelin: {
                    relayerForwarderAddress?: string | undefined;
                    useEOAForwarder?: boolean | undefined;
                    relayerUrl: string;
                };
            } | {
                biconomy: {
                    deadlineSeconds?: number | undefined;
                    apiId: string;
                    apiKey: string;
                };
            } | undefined;
            gatewayUrls?: string[] | undefined;
        } | undefined) => Promise<import("./prebuilt-implementations/signature-drop").SignatureDrop>;
        getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
            [x: string]: any;
            name?: string | undefined;
            inputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            outputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
        }[] | ({
            inputs: never[];
            name: string;
            type: string;
            anonymous?: undefined;
            outputs?: undefined;
            stateMutability?: undefined;
        } | {
            anonymous: boolean;
            inputs: ({
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            } | {
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            })[];
            name: string;
            type: string;
            outputs?: undefined;
            stateMutability?: undefined;
        } | {
            inputs: ({
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            } | {
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            })[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        })[]>;
    };
    readonly split: {
        name: "Split";
        contractType: "split";
        schema: {
            deploy: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                recipients: import("zod").ZodEffects<import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodObject<{
                    address: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                    sharesBps: import("zod").ZodNumber;
                }, "strip", import("zod").ZodTypeAny, {
                    address: string;
                    sharesBps: number;
                }, {
                    address: string;
                    sharesBps: number;
                }>, "many">>, {
                    address: string;
                    sharesBps: number;
                }[], {
                    address: string;
                    sharesBps: number;
                }[] | undefined>;
                trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
                trusted_forwarders: string[];
                recipients: {
                    address: string;
                    sharesBps: number;
                }[];
            }, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                trusted_forwarders?: string[] | undefined;
                recipients?: {
                    address: string;
                    sharesBps: number;
                }[] | undefined;
                name: string;
            }>;
            output: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodString>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                recipients: import("zod").ZodArray<import("zod").ZodObject<{
                    address: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                    sharesBps: import("zod").ZodNumber;
                }, "strip", import("zod").ZodTypeAny, {
                    address: string;
                    sharesBps: number;
                }, {
                    address: string;
                    sharesBps: number;
                }>, "many">;
            }, "strip", import("zod").ZodUnknown, {
                [x: string]: unknown;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
                recipients: {
                    address: string;
                    sharesBps: number;
                }[];
            }, {
                [x: string]: unknown;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
                recipients: {
                    address: string;
                    sharesBps: number;
                }[];
            }>;
            input: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                recipients: import("zod").ZodEffects<import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodObject<{
                    address: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                    sharesBps: import("zod").ZodNumber;
                }, "strip", import("zod").ZodTypeAny, {
                    address: string;
                    sharesBps: number;
                }, {
                    address: string;
                    sharesBps: number;
                }>, "many">>, {
                    address: string;
                    sharesBps: number;
                }[], {
                    address: string;
                    sharesBps: number;
                }[] | undefined>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
                recipients: {
                    address: string;
                    sharesBps: number;
                }[];
            }, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                recipients?: {
                    address: string;
                    sharesBps: number;
                }[] | undefined;
                name: string;
            }>;
        };
        roles: readonly ["admin"];
        initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
            supportedChains?: {
                chainId: number;
                slug: string;
                rpc: string[];
                nativeCurrency: {
                    symbol: string;
                    name: string;
                    decimals: number;
                };
            }[] | undefined;
            thirdwebApiKey?: string | undefined;
            alchemyApiKey?: string | undefined;
            infuraApiKey?: string | undefined;
            readonlySettings?: {
                chainId?: number | undefined;
                rpcUrl: string;
            } | undefined;
            gasSettings?: {
                maxPriceInGwei?: number | undefined;
                speed?: "standard" | "fast" | "fastest" | undefined;
            } | undefined;
            gasless?: {
                experimentalChainlessSupport?: boolean | undefined;
                openzeppelin: {
                    relayerForwarderAddress?: string | undefined;
                    useEOAForwarder?: boolean | undefined;
                    relayerUrl: string;
                };
            } | {
                biconomy: {
                    deadlineSeconds?: number | undefined;
                    apiId: string;
                    apiKey: string;
                };
            } | undefined;
            gatewayUrls?: string[] | undefined;
        } | undefined) => Promise<import("./prebuilt-implementations/split").Split>;
        getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
            [x: string]: any;
            name?: string | undefined;
            inputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            outputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
        }[] | ({
            inputs: never[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
            name?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: {
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            stateMutability: string;
            type: string;
            inputs?: undefined;
            anonymous?: undefined;
            name?: undefined;
            outputs?: undefined;
        })[]>;
    };
    readonly "token-drop": {
        name: "DropERC20";
        contractType: "token-drop";
        schema: {
            deploy: import("zod").ZodObject<{
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                primary_sale_recipient: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                merkle: Record<string, string>;
                platform_fee_basis_points: number;
                platform_fee_recipient: string;
                primary_sale_recipient: string;
                trusted_forwarders: string[];
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                merkle?: Record<string, string> | undefined;
                platform_fee_basis_points?: number | undefined;
                platform_fee_recipient?: string | undefined;
                trusted_forwarders?: string[] | undefined;
                name: string;
                primary_sale_recipient: string;
            }>;
            output: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodString>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                merkle: Record<string, string>;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                merkle?: Record<string, string> | undefined;
                name: string;
            }>;
            input: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                merkle: import("zod").ZodDefault<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                merkle: Record<string, string>;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                merkle?: Record<string, string> | undefined;
                name: string;
            }>;
        };
        roles: readonly ["admin", "transfer"];
        initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
            supportedChains?: {
                chainId: number;
                slug: string;
                rpc: string[];
                nativeCurrency: {
                    symbol: string;
                    name: string;
                    decimals: number;
                };
            }[] | undefined;
            thirdwebApiKey?: string | undefined;
            alchemyApiKey?: string | undefined;
            infuraApiKey?: string | undefined;
            readonlySettings?: {
                chainId?: number | undefined;
                rpcUrl: string;
            } | undefined;
            gasSettings?: {
                maxPriceInGwei?: number | undefined;
                speed?: "standard" | "fast" | "fastest" | undefined;
            } | undefined;
            gasless?: {
                experimentalChainlessSupport?: boolean | undefined;
                openzeppelin: {
                    relayerForwarderAddress?: string | undefined;
                    useEOAForwarder?: boolean | undefined;
                    relayerUrl: string;
                };
            } | {
                biconomy: {
                    deadlineSeconds?: number | undefined;
                    apiId: string;
                    apiKey: string;
                };
            } | undefined;
            gatewayUrls?: string[] | undefined;
        } | undefined) => Promise<import("./prebuilt-implementations/token-drop").TokenDrop>;
        getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
            [x: string]: any;
            name?: string | undefined;
            inputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            outputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
        }[] | ({
            inputs: never[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
            name?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: {
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            inputs: ({
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            } | {
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            })[];
            name: string;
            outputs: never[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        })[]>;
    };
    readonly token: {
        name: "TokenERC20";
        contractType: "token";
        schema: {
            deploy: import("zod").ZodObject<{
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                platform_fee_basis_points: import("zod").ZodDefault<import("zod").ZodNumber>;
                platform_fee_recipient: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodString, string, string>>;
                primary_sale_recipient: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
                platform_fee_basis_points: number;
                platform_fee_recipient: string;
                primary_sale_recipient: string;
                trusted_forwarders: string[];
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                platform_fee_basis_points?: number | undefined;
                platform_fee_recipient?: string | undefined;
                trusted_forwarders?: string[] | undefined;
                name: string;
                primary_sale_recipient: string;
            }>;
            output: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodString>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
            }>;
            input: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                symbol: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                symbol: string;
                name: string;
            }, {
                symbol?: string | undefined;
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
            }>;
        };
        roles: readonly ["admin", "minter", "transfer"];
        initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
            supportedChains?: {
                chainId: number;
                slug: string;
                rpc: string[];
                nativeCurrency: {
                    symbol: string;
                    name: string;
                    decimals: number;
                };
            }[] | undefined;
            thirdwebApiKey?: string | undefined;
            alchemyApiKey?: string | undefined;
            infuraApiKey?: string | undefined;
            readonlySettings?: {
                chainId?: number | undefined;
                rpcUrl: string;
            } | undefined;
            gasSettings?: {
                maxPriceInGwei?: number | undefined;
                speed?: "standard" | "fast" | "fastest" | undefined;
            } | undefined;
            gasless?: {
                experimentalChainlessSupport?: boolean | undefined;
                openzeppelin: {
                    relayerForwarderAddress?: string | undefined;
                    useEOAForwarder?: boolean | undefined;
                    relayerUrl: string;
                };
            } | {
                biconomy: {
                    deadlineSeconds?: number | undefined;
                    apiId: string;
                    apiKey: string;
                };
            } | undefined;
            gatewayUrls?: string[] | undefined;
        } | undefined) => Promise<import("./prebuilt-implementations/token").Token>;
        getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
            [x: string]: any;
            name?: string | undefined;
            inputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            outputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
        }[] | ({
            inputs: never[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
            name?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: ({
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            } | {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            })[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            inputs: ({
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            } | {
                internalType: string;
                name: string;
                type: string;
                components?: undefined;
            })[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        })[]>;
    };
    readonly vote: {
        name: "VoteERC20";
        contractType: "vote";
        schema: {
            deploy: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                voting_delay_in_blocks: import("zod").ZodDefault<import("zod").ZodNumber>;
                voting_period_in_blocks: import("zod").ZodDefault<import("zod").ZodNumber>;
                voting_token_address: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                voting_quorum_fraction: import("zod").ZodDefault<import("zod").ZodNumber>;
                proposal_token_threshold: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBigInt, import("zod").ZodType<ethers.BigNumber, import("zod").ZodTypeDef, ethers.BigNumber>]>, ethers.BigNumber, string | number | bigint | ethers.BigNumber>, string, string | number | bigint | ethers.BigNumber>>;
                trusted_forwarders: import("zod").ZodDefault<import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, string, string>, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
                trusted_forwarders: string[];
                voting_delay_in_blocks: number;
                voting_period_in_blocks: number;
                voting_token_address: string;
                voting_quorum_fraction: number;
                proposal_token_threshold: string;
            }, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                trusted_forwarders?: string[] | undefined;
                voting_delay_in_blocks?: number | undefined;
                voting_period_in_blocks?: number | undefined;
                voting_quorum_fraction?: number | undefined;
                proposal_token_threshold?: string | number | bigint | ethers.BigNumber | undefined;
                name: string;
                voting_token_address: string;
            }>;
            output: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodString>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                voting_delay_in_blocks: import("zod").ZodDefault<import("zod").ZodNumber>;
                voting_period_in_blocks: import("zod").ZodDefault<import("zod").ZodNumber>;
                voting_token_address: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                voting_quorum_fraction: import("zod").ZodDefault<import("zod").ZodNumber>;
                proposal_token_threshold: import("zod").ZodEffects<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBigInt, import("zod").ZodType<ethers.BigNumber, import("zod").ZodTypeDef, ethers.BigNumber>]>, ethers.BigNumber, string | number | bigint | ethers.BigNumber>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
                voting_delay_in_blocks: number;
                voting_period_in_blocks: number;
                voting_token_address: string;
                voting_quorum_fraction: number;
                proposal_token_threshold: ethers.BigNumber;
            }, {
                description?: string | undefined;
                image?: string | undefined;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                voting_delay_in_blocks?: number | undefined;
                voting_period_in_blocks?: number | undefined;
                voting_quorum_fraction?: number | undefined;
                name: string;
                voting_token_address: string;
                proposal_token_threshold: string | number | bigint | ethers.BigNumber;
            }>;
            input: import("zod").ZodObject<{
                name: import("zod").ZodString;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                image: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodObject<{
                    data: import("zod").ZodUnion<[import("zod").ZodTypeAny, import("zod").ZodString]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    data?: any;
                    name: string;
                }, {
                    data?: any;
                    name: string;
                }>]>, import("zod").ZodString]>>;
                external_link: import("zod").ZodOptional<import("zod").ZodString>;
                app_uri: import("zod").ZodOptional<import("zod").ZodString>;
                voting_delay_in_blocks: import("zod").ZodDefault<import("zod").ZodNumber>;
                voting_period_in_blocks: import("zod").ZodDefault<import("zod").ZodNumber>;
                voting_token_address: import("zod").ZodEffects<import("zod").ZodString, string, string>;
                voting_quorum_fraction: import("zod").ZodDefault<import("zod").ZodNumber>;
                proposal_token_threshold: import("zod").ZodDefault<import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBigInt, import("zod").ZodType<ethers.BigNumber, import("zod").ZodTypeDef, ethers.BigNumber>]>, ethers.BigNumber, string | number | bigint | ethers.BigNumber>, string, string | number | bigint | ethers.BigNumber>>;
            }, "strip", import("zod").ZodTypeAny, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                name: string;
                voting_delay_in_blocks: number;
                voting_period_in_blocks: number;
                voting_token_address: string;
                voting_quorum_fraction: number;
                proposal_token_threshold: string;
            }, {
                description?: string | undefined;
                image?: any;
                external_link?: string | undefined;
                app_uri?: string | undefined;
                voting_delay_in_blocks?: number | undefined;
                voting_period_in_blocks?: number | undefined;
                voting_quorum_fraction?: number | undefined;
                proposal_token_threshold?: string | number | bigint | ethers.BigNumber | undefined;
                name: string;
                voting_token_address: string;
            }>;
        };
        roles: readonly [];
        initialize: (network: NetworkInput, address: string, storage: ThirdwebStorage<import("@thirdweb-dev/storage").IpfsUploadBatchOptions>, options?: {
            supportedChains?: {
                chainId: number;
                slug: string;
                rpc: string[];
                nativeCurrency: {
                    symbol: string;
                    name: string;
                    decimals: number;
                };
            }[] | undefined;
            thirdwebApiKey?: string | undefined;
            alchemyApiKey?: string | undefined;
            infuraApiKey?: string | undefined;
            readonlySettings?: {
                chainId?: number | undefined;
                rpcUrl: string;
            } | undefined;
            gasSettings?: {
                maxPriceInGwei?: number | undefined;
                speed?: "standard" | "fast" | "fastest" | undefined;
            } | undefined;
            gasless?: {
                experimentalChainlessSupport?: boolean | undefined;
                openzeppelin: {
                    relayerForwarderAddress?: string | undefined;
                    useEOAForwarder?: boolean | undefined;
                    relayerUrl: string;
                };
            } | {
                biconomy: {
                    deadlineSeconds?: number | undefined;
                    apiId: string;
                    apiKey: string;
                };
            } | undefined;
            gatewayUrls?: string[] | undefined;
        } | undefined) => Promise<import("./prebuilt-implementations/vote").Vote>;
        getAbi: (address: string, provider: ethers.providers.Provider, storage: ThirdwebStorage) => Promise<{
            [x: string]: any;
            name?: string | undefined;
            inputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            outputs?: {
                [x: string]: any;
                stateMutability?: string | undefined;
                components?: {
                    [x: string]: any;
                    type: string;
                    name: string;
                }[] | undefined;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
        }[] | ({
            inputs: never[];
            stateMutability: string;
            type: string;
            name?: undefined;
            anonymous?: undefined;
            outputs?: undefined;
        } | {
            inputs: never[];
            name: string;
            type: string;
            stateMutability?: undefined;
            anonymous?: undefined;
            outputs?: undefined;
        } | {
            anonymous: boolean;
            inputs: {
                indexed: boolean;
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            type: string;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            inputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            name: string;
            outputs: {
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            inputs: never[];
            name: string;
            outputs: {
                components: {
                    internalType: string;
                    name: string;
                    type: string;
                }[];
                internalType: string;
                name: string;
                type: string;
            }[];
            stateMutability: string;
            type: string;
            anonymous?: undefined;
        } | {
            stateMutability: string;
            type: string;
            inputs?: undefined;
            name?: undefined;
            anonymous?: undefined;
            outputs?: undefined;
        })[]>;
    };
};
/**
 * @internal
 */
export declare function getContractTypeForRemoteName(name: string): ContractType;
export declare function getContractName(type: PrebuiltContractType): string | undefined;
//# sourceMappingURL=index.d.ts.map