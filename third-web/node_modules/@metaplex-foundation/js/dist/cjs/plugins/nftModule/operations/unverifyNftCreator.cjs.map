{"version":3,"file":"unverifyNftCreator.cjs","sources":["../../../../../src/plugins/nftModule/operations/unverifyNftCreator.ts"],"sourcesContent":["import { createRemoveCreatorVerificationInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UnverifyNftCreatorOperation' as const;\n\n/**\n * Unverifies the creator of an NFT or SFT.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .unverifyCreator({ mintAddress, creator };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const unverifyNftCreatorOperation =\n  useOperation<UnverifyNftCreatorOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type UnverifyNftCreatorOperation = Operation<\n  typeof Key,\n  UnverifyNftCreatorInput,\n  UnverifyNftCreatorOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type UnverifyNftCreatorInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /**\n   * The creator of the NFT or SFT as a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  creator?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type UnverifyNftCreatorOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const unverifyNftCreatorOperationHandler: OperationHandler<UnverifyNftCreatorOperation> =\n  {\n    handle: async (\n      operation: UnverifyNftCreatorOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<UnverifyNftCreatorOutput> => {\n      return unverifyNftCreatorBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type UnverifyNftCreatorBuilderParams = Omit<\n  UnverifyNftCreatorInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that unverifies the creator. */\n  instructionKey?: string;\n};\n\n/**\n * Unverifies the creator of an NFT or SFT.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .unverifyCreator({ mintAddress, creator });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const unverifyNftCreatorBuilder = (\n  metaplex: Metaplex,\n  params: UnverifyNftCreatorBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { mintAddress, creator = metaplex.identity() } = params;\n\n  // Programs.\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Verify the creator.\n      .add({\n        instruction: createRemoveCreatorVerificationInstruction(\n          {\n            metadata: metaplex.nfts().pdas().metadata({\n              mint: mintAddress,\n              programs,\n            }),\n            creator: creator.publicKey,\n          },\n          tokenMetadataProgram.address\n        ),\n        signers: [creator],\n        key: params.instructionKey ?? 'unverifyCreator',\n      })\n  );\n};\n"],"names":["Key","unverifyNftCreatorOperation","useOperation","unverifyNftCreatorOperationHandler","handle","operation","metaplex","scope","unverifyNftCreatorBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","creator","identity","tokenMetadataProgram","getTokenMetadata","TransactionBuilder","make","setFeePayer","add","instruction","createRemoveCreatorVerificationInstruction","metadata","nfts","pdas","mint","publicKey","address","signers","key","instructionKey"],"mappings":";;;;;;;;AAaA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,6BAAsC,CAAA;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,2BAA2B,GACtCC,sBAAY,CAA8BF,GAAG,EAAC;;AAEhD;AACA;AACA;AACA;;AAgCA;AACA;AACA;AACA;AACO,MAAMG,kCAAiF,GAC5F;AACEC,EAAAA,MAAM,EAAE,OACNC,SAAsC,EACtCC,QAAkB,EAClBC,KAAqB,KACiB;AACtC,IAAA,OAAOC,yBAAyB,CAC9BF,QAAQ,EACRD,SAAS,CAACI,KAAK,EACfF,KAAK,CACN,CAACG,cAAc,CAACJ,QAAQ,EAAEC,KAAK,CAACI,cAAc,CAAC,CAAA;AAClD,GAAA;AACF,EAAC;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACaH,MAAAA,yBAAyB,GAAG,CACvCF,QAAkB,EAClBM,MAAuC,EACvCC,OAAkC,GAAG,EAAE,KAChB;EACvB,MAAM;IAAEC,QAAQ;AAAEC,IAAAA,KAAK,GAAGT,QAAQ,CAACU,GAAG,EAAE,CAACC,kBAAkB,EAAA;AAAG,GAAC,GAAGJ,OAAO,CAAA;EACzE,MAAM;IAAEK,WAAW;IAAEC,OAAO,GAAGb,QAAQ,CAACc,QAAQ,EAAA;AAAG,GAAC,GAAGR,MAAM,CAAA;;AAE7D;EACA,MAAMS,oBAAoB,GAAGf,QAAQ,CAACQ,QAAQ,EAAE,CAACQ,gBAAgB,CAACR,QAAQ,CAAC,CAAA;AAE3E,EAAA,OACES,qCAAkB,CAACC,IAAI,EAAE,CACtBC,WAAW,CAACV,KAAK,CAAA;;AAElB;AAAA,GACCW,GAAG,CAAC;IACHC,WAAW,EAAEC,2DAA0C,CACrD;MACEC,QAAQ,EAAEvB,QAAQ,CAACwB,IAAI,EAAE,CAACC,IAAI,EAAE,CAACF,QAAQ,CAAC;AACxCG,QAAAA,IAAI,EAAEd,WAAW;AACjBJ,QAAAA,QAAAA;AACF,OAAC,CAAC;MACFK,OAAO,EAAEA,OAAO,CAACc,SAAAA;AACnB,KAAC,EACDZ,oBAAoB,CAACa,OAAO,CAC7B;IACDC,OAAO,EAAE,CAAChB,OAAO,CAAC;AAClBiB,IAAAA,GAAG,EAAExB,MAAM,CAACyB,cAAc,IAAI,iBAAA;AAChC,GAAC,CAAC,CAAA;AAER;;;;;;"}