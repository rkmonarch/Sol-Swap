{"version":3,"file":"NftPdasClient.mjs","sources":["../../../../src/plugins/nftModule/NftPdasClient.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport type { Metaplex } from '@/Metaplex';\nimport { BigNumber, Pda, Program, PublicKey, toBigNumber } from '@/types';\n\n/**\n * This client allows you to build PDAs related to the NFT module.\n *\n * @see {@link NftClient}\n * @group Module Pdas\n */\nexport class NftPdasClient {\n  constructor(protected readonly metaplex: Metaplex) {}\n\n  /** Finds the Metadata PDA of a given mint address. */\n  metadata({ mint, programs }: MintAddressPdaInput): Pda {\n    const programId = this.programId(programs);\n    return Pda.find(programId, [\n      Buffer.from('metadata', 'utf8'),\n      programId.toBuffer(),\n      mint.toBuffer(),\n    ]);\n  }\n\n  /** Finds the Master Edition PDA of a given mint address. */\n  masterEdition({ mint, programs }: MintAddressPdaInput): Pda {\n    const programId = this.programId(programs);\n    return Pda.find(programId, [\n      Buffer.from('metadata', 'utf8'),\n      programId.toBuffer(),\n      mint.toBuffer(),\n      Buffer.from('edition', 'utf8'),\n    ]);\n  }\n\n  /** Finds the Edition PDA of a given mint address. */\n  edition(input: MintAddressPdaInput): Pda {\n    return this.masterEdition(input);\n  }\n\n  /** Finds the Edition Marker PDA of a given edition number. */\n  editionMarker({\n    mint,\n    edition,\n    programs,\n  }: {\n    /** The address of the mint account of the edition NFT. */\n    mint: PublicKey;\n    /** The edition number of the NFT. */\n    edition: BigNumber;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(programs);\n    return Pda.find(programId, [\n      Buffer.from('metadata', 'utf8'),\n      programId.toBuffer(),\n      mint.toBuffer(),\n      Buffer.from('edition', 'utf8'),\n      Buffer.from(edition.div(toBigNumber(248)).toString()),\n    ]);\n  }\n\n  /** Finds the collection authority PDA for a given NFT and authority. */\n  collectionAuthorityRecord({\n    mint,\n    collectionAuthority,\n    programs,\n  }: {\n    /** The address of the NFT's mint account. */\n    mint: PublicKey;\n    /** The address of the collection authority. */\n    collectionAuthority: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(programs);\n    return Pda.find(programId, [\n      Buffer.from('metadata', 'utf8'),\n      programId.toBuffer(),\n      mint.toBuffer(),\n      Buffer.from('collection_authority', 'utf8'),\n      collectionAuthority.toBuffer(),\n    ]);\n  }\n\n  /** Finds the use authority PDA for a given NFT and user. */\n  useAuthorityRecord({\n    mint,\n    useAuthority,\n    programs,\n  }: {\n    /** The address of the NFT's mint account. */\n    mint: PublicKey;\n    /** The address of the use authority. */\n    useAuthority: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(programs);\n    return Pda.find(programId, [\n      Buffer.from('metadata', 'utf8'),\n      programId.toBuffer(),\n      mint.toBuffer(),\n      Buffer.from('user', 'utf8'),\n      useAuthority.toBuffer(),\n    ]);\n  }\n\n  /** Finds the burner PDA of the Token Metadata program. */\n  burner({\n    programs,\n  }: {\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(programs);\n    return Pda.find(programId, [\n      Buffer.from('metadata', 'utf8'),\n      programId.toBuffer(),\n      Buffer.from('burn', 'utf8'),\n    ]);\n  }\n\n  private programId(programs?: Program[]) {\n    return this.metaplex.programs().getTokenMetadata(programs).address;\n  }\n}\n\ntype MintAddressPdaInput = {\n  /** The address of the mint account. */\n  mint: PublicKey;\n\n  /** An optional set of programs that override the registered ones. */\n  programs?: Program[];\n};\n"],"names":["NftPdasClient","constructor","metaplex","metadata","mint","programs","programId","Pda","find","Buffer","from","toBuffer","masterEdition","edition","input","editionMarker","div","toBigNumber","toString","collectionAuthorityRecord","collectionAuthority","useAuthorityRecord","useAuthority","burner","getTokenMetadata","address"],"mappings":"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"}