import { ChainOrRpcUrl, NetworkInput } from "../core";
import { SDKOptions, SDKOptionsOutput } from "../schema";
import { ChainId, SUPPORTED_CHAIN_ID } from "./chains";
import { Chain } from "@thirdweb-dev/chains";
import { ethers } from "ethers";
/**
 * @internal
 */
export declare const DEFAULT_IPFS_GATEWAY = "https://gateway.ipfscdn.io/ipfs/";
export type ChainNames = "mainnet" | "ethereum" | "goerli" | "polygon" | "matic" | "mumbai" | "fantom" | "fantom-testnet" | "avalanche" | "avalanche-testnet" | "avalanche-fuji" | "optimism" | "optimism-goerli" | "arbitrum" | "arbitrum-goerli" | "binance" | "binance-testnet" | "hardhat" | "localhost";
/**
 * @internal
 */
export declare const CHAIN_NAME_TO_ID: Record<ChainNames, SUPPORTED_CHAIN_ID>;
export declare const CHAIN_ID_TO_NAME: Record<ChainId, ChainNames>;
export declare function buildDefaultMap(sdkOptions?: SDKOptions): Record<number, {
    chainId: number;
    slug: string;
    rpc: string[];
    nativeCurrency: {
        symbol: string;
        name: string;
        decimals: number;
    };
}>;
/**
 * Get an ethers provider for the specified network
 *
 * @internal
 */
export declare function getChainProvider(network: ChainOrRpcUrl, sdkOptions: SDKOptions): ethers.providers.Provider;
export declare function getChainIdFromNetwork(network: ChainOrRpcUrl, options: SDKOptionsOutput): number;
/**
 * Check whether a NetworkInput value is a Chain config (naively, without parsing)
 */
export declare function isChainConfig(network: NetworkInput): network is Chain;
/**
 * Returns whether the specified url is a valid RPC url, as implemented by ethers.getDefaultProvier():
 * - https://github.com/ethers-io/ethers.js/blob/ec1b9583039a14a0e0fa15d0a2a6082a2f41cf5b/packages/providers/src.ts/index.ts#L55
 *
 * @param url - The url to check
 *
 * @internal
 */
export declare function isRpcUrl(url: string): boolean;
/**
 * Get an ethers provider based on the specified RPC URL
 *
 * @param rpcUrl - The RPC URL
 * @param chainId - The optional chain ID
 * @returns The provider for the specified RPC URL
 *
 * @internal
 */
export declare function getProviderFromRpcUrl(rpcUrl: string, chainId?: number): ethers.providers.BaseProvider;
//# sourceMappingURL=urls.d.ts.map