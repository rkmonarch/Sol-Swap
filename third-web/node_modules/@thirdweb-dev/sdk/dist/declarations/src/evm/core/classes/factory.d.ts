import { SDKOptions } from "../../schema/sdk-options";
import { DeployEvents } from "../../types";
import { DeploySchemaForPrebuiltContractType, NetworkInput, PrebuiltContractType } from "../types";
import { ContractWrapper } from "./contract-wrapper";
import type { TWFactory } from "@thirdweb-dev/contracts-js";
import { ThirdwebStorage } from "@thirdweb-dev/storage";
import { BigNumber, ContractInterface } from "ethers";
import { EventEmitter } from "eventemitter3";
import { z } from "zod";
/**
 * @internal
 */
export declare class ContractFactory extends ContractWrapper<TWFactory> {
    private storage;
    private DEFAULT_VERSION_MAP;
    constructor(factoryAddr: string, network: NetworkInput, storage: ThirdwebStorage, options?: SDKOptions);
    deploy<TContractType extends PrebuiltContractType>(contractType: TContractType, contractMetadata: z.input<DeploySchemaForPrebuiltContractType<TContractType>>, eventEmitter: EventEmitter<DeployEvents>, version?: number): Promise<string>;
    deployProxyByImplementation(implementationAddress: string, implementationAbi: ContractInterface, initializerFunction: string, initializerArgs: any[], eventEmitter: EventEmitter<DeployEvents>): Promise<string>;
    /**
     *
     * @param contractType
     * @param metadata
     * @param contractURI
     * @returns
     * @internal
     */
    getDeployArguments<TContractType extends PrebuiltContractType>(contractType: TContractType, metadata: z.input<DeploySchemaForPrebuiltContractType<TContractType>>, contractURI: string): Promise<any[]>;
    private getDefaultTrustedForwarders;
    private getImplementation;
    getLatestVersion(contractType: PrebuiltContractType): Promise<BigNumber>;
}
//# sourceMappingURL=factory.d.ts.map