{"version":3,"file":"verifyNftCollection.mjs","sources":["../../../../../src/plugins/nftModule/operations/verifyNftCollection.ts"],"sourcesContent":["import {\n  createVerifyCollectionInstruction,\n  createVerifySizedCollectionItemInstruction,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'VerifyNftCollectionOperation' as const;\n\n/**\n * Verifies the collection of an NFT or SFT.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .verifyCollection({ mintAddress, collectionMintAddress };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const verifyNftCollectionOperation =\n  useOperation<VerifyNftCollectionOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type VerifyNftCollectionOperation = Operation<\n  typeof Key,\n  VerifyNftCollectionInput,\n  VerifyNftCollectionOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type VerifyNftCollectionInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /** The mint address of the collection NFT. */\n  collectionMintAddress: PublicKey;\n\n  /**\n   * An authority that can verify and unverify collection items\n   * from the provided `collectionMintAddress`.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  collectionAuthority?: Signer;\n\n  /**\n   * Whether or not the provided `collectionMintAddress` is a\n   * sized collection (as opposed to a legacy collection).\n   *\n   * @defaultValue `true`\n   */\n  isSizedCollection?: boolean;\n\n  /**\n   * Whether or not the provided `collectionAuthority` is a delegated\n   * collection authority, i.e. it was approved by the update authority\n   * using `metaplex.nfts().approveCollectionAuthority()`.\n   *\n   * @defaultValue `false`\n   */\n  isDelegated?: boolean;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type VerifyNftCollectionOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const verifyNftCollectionOperationHandler: OperationHandler<VerifyNftCollectionOperation> =\n  {\n    handle: async (\n      operation: VerifyNftCollectionOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<VerifyNftCollectionOutput> => {\n      return verifyNftCollectionBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type VerifyNftCollectionBuilderParams = Omit<\n  VerifyNftCollectionInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that verifies the collection. */\n  instructionKey?: string;\n};\n\n/**\n * Verifies the collection of an NFT or SFT.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .verifyCollection({ mintAddress, collectionMintAddress });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const verifyNftCollectionBuilder = (\n  metaplex: Metaplex,\n  params: VerifyNftCollectionBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    collectionMintAddress,\n    isSizedCollection = true,\n    isDelegated = false,\n    collectionAuthority = metaplex.identity(),\n  } = params;\n\n  // Programs.\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n\n  const accounts = {\n    metadata: metaplex.nfts().pdas().metadata({\n      mint: mintAddress,\n      programs,\n    }),\n    collectionAuthority: collectionAuthority.publicKey,\n    payer: payer.publicKey,\n    collectionMint: collectionMintAddress,\n    collection: metaplex.nfts().pdas().metadata({\n      mint: collectionMintAddress,\n      programs,\n    }),\n    collectionMasterEditionAccount: metaplex.nfts().pdas().masterEdition({\n      mint: collectionMintAddress,\n      programs,\n    }),\n  };\n\n  const instruction = isSizedCollection\n    ? createVerifySizedCollectionItemInstruction(\n        accounts,\n        tokenMetadataProgram.address\n      )\n    : createVerifyCollectionInstruction(accounts, tokenMetadataProgram.address);\n\n  if (isDelegated) {\n    instruction.keys.push({\n      pubkey: metaplex.nfts().pdas().collectionAuthorityRecord({\n        mint: collectionMintAddress,\n        collectionAuthority: collectionAuthority.publicKey,\n        programs,\n      }),\n      isWritable: false,\n      isSigner: false,\n    });\n  }\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Verify the collection.\n      .add({\n        instruction,\n        signers: [payer, collectionAuthority],\n        key: params.instructionKey ?? 'verifyCollection',\n      })\n  );\n};\n"],"names":["Key","verifyNftCollectionOperation","useOperation","verifyNftCollectionOperationHandler","handle","operation","metaplex","scope","verifyNftCollectionBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","collectionMintAddress","isSizedCollection","isDelegated","collectionAuthority","identity","tokenMetadataProgram","getTokenMetadata","accounts","metadata","nfts","pdas","mint","publicKey","collectionMint","collection","collectionMasterEditionAccount","masterEdition","instruction","createVerifySizedCollectionItemInstruction","address","createVerifyCollectionInstruction","keys","push","pubkey","collectionAuthorityRecord","isWritable","isSigner","TransactionBuilder","make","setFeePayer","add","signers","key","instructionKey"],"mappings":"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"}