'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var getContract = require('../../dist/getContract-fea456b7.cjs.dev.js');
require('zod');
require('../../dist/QueryParams-e64c589e.cjs.dev.js');
require('bn.js');
require('ethers');
require('@thirdweb-dev/contracts-js/dist/abis/IERC165.json');
require('@thirdweb-dev/contracts-js/dist/abis/IERC721.json');
require('@thirdweb-dev/contracts-js/dist/abis/IERC1155.json');
require('tiny-invariant');
require('@thirdweb-dev/contracts-js/dist/abis/IERC20.json');
require('@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json');
require('@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json');
require('@thirdweb-dev/contracts-js/dist/abis/IDrop.json');
require('@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json');
require('@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json');
require('@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json');
require('@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json');
require('@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json');
require('@thirdweb-dev/contracts-js/dist/abis/IMulticall.json');
require('@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json');
require('@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json');
require('@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json');
require('@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json');
require('@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json');
require('@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json');
require('@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json');
require('@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json');
require('@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json');
require('@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json');
require('@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json');
require('@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json');
require('@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json');
require('@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json');
require('@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json');
require('@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json');
require('@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json');
require('@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json');
require('@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json');
require('@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json');
require('@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json');
require('@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json');
require('@thirdweb-dev/contracts-js/dist/abis/IAppURI.json');
require('@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json');
require('@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json');
require('@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json');
require('@thirdweb-dev/contracts-js/dist/abis/IOffers.json');
require('@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json');
require('@thirdweb-dev/contracts-js/dist/abis/IPermissions.json');
require('@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json');
require('@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json');
require('@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json');
require('@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json');
require('@thirdweb-dev/contracts-js/dist/abis/Ownable.json');
require('@thirdweb-dev/chains');
require('bs58');
require('cross-fetch');
require('eventemitter3');
require('@thirdweb-dev/contracts-js/dist/abis/Forwarder.json');
require('@thirdweb-dev/storage');
require('@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json');
require('merkletreejs');
require('fast-deep-equal');
require('uuid');
require('@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json');
require('@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json');
require('@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json');
require('@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json');
require('@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json');
require('@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json');
require('@thirdweb-dev/contracts-js/dist/abis/TWFactory.json');
require('@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json');

// handle browser vs node global
globalThis.global = globalThis;

exports.ALL_ROLES = getContract.ALL_ROLES;
exports.APPROVED_IMPLEMENTATIONS = getContract.APPROVED_IMPLEMENTATIONS;
exports.AbiObjectSchema = getContract.AbiObjectSchema;
exports.AbiSchema = getContract.AbiSchema;
exports.AbiTypeSchema = getContract.AbiTypeSchema;
exports.AddressSchema = getContract.AddressSchema;
exports.AdminRoleMissingError = getContract.AdminRoleMissingError;
exports.AssetNotFoundError = getContract.AssetNotFoundError;
exports.AuctionAlreadyStartedError = getContract.AuctionAlreadyStartedError;
exports.AuctionHasNotEndedError = getContract.AuctionHasNotEndedError;
exports.BYOCContractMetadataSchema = getContract.BYOCContractMetadataSchema;
exports.BaseSignaturePayloadInput = getContract.BaseSignaturePayloadInput;
exports.BigNumberSchema = getContract.BigNumberSchema;
exports.BigNumberTransformSchema = getContract.BigNumberTransformSchema;
exports.BigNumberishSchema = getContract.BigNumberishSchema;
exports.CHAIN_ID_TO_NAME = getContract.CHAIN_ID_TO_NAME;
exports.CHAIN_NAME_TO_ID = getContract.CHAIN_NAME_TO_ID;
exports.CONTRACTS_MAP = getContract.CONTRACTS_MAP;
exports.CONTRACT_ADDRESSES = getContract.CONTRACT_ADDRESSES;
exports.CallOverrideSchema = getContract.CallOverrideSchema;
Object.defineProperty(exports, 'ChainId', {
  enumerable: true,
  get: function () { return getContract.ChainId; }
});
exports.ChainIdToAddressSchema = getContract.ChainIdToAddressSchema;
exports.ChainInfoInputSchema = getContract.ChainInfoInputSchema;
exports.ClaimConditionInputArray = getContract.ClaimConditionInputArray;
exports.ClaimConditionInputSchema = getContract.ClaimConditionInputSchema;
exports.ClaimConditionMetadataSchema = getContract.ClaimConditionMetadataSchema;
exports.ClaimConditionOutputSchema = getContract.ClaimConditionOutputSchema;
Object.defineProperty(exports, 'ClaimEligibility', {
  enumerable: true,
  get: function () { return getContract.ClaimEligibility; }
});
exports.CommonContractOutputSchema = getContract.CommonContractOutputSchema;
exports.CommonContractSchema = getContract.CommonContractSchema;
exports.CommonPlatformFeeSchema = getContract.CommonPlatformFeeSchema;
exports.CommonPrimarySaleSchema = getContract.CommonPrimarySaleSchema;
exports.CommonRoyaltySchema = getContract.CommonRoyaltySchema;
exports.CommonSymbolSchema = getContract.CommonSymbolSchema;
exports.CommonTrustedForwarderSchema = getContract.CommonTrustedForwarderSchema;
exports.CompilerMetadataFetchedSchema = getContract.CompilerMetadataFetchedSchema;
exports.ContractAppURI = getContract.ContractAppURI;
exports.ContractDeployer = getContract.ContractDeployer;
exports.ContractEncoder = getContract.ContractEncoder;
exports.ContractEvents = getContract.ContractEvents;
exports.ContractInfoSchema = getContract.ContractInfoSchema;
exports.ContractInterceptor = getContract.ContractInterceptor;
exports.ContractMetadata = getContract.ContractMetadata;
exports.ContractOwner = getContract.ContractOwner;
exports.ContractPlatformFee = getContract.ContractPlatformFee;
exports.ContractPrimarySale = getContract.ContractPrimarySale;
exports.ContractPublishedMetadata = getContract.ContractPublishedMetadata;
exports.ContractRoles = getContract.ContractRoles;
exports.ContractRoyalty = getContract.ContractRoyalty;
exports.CurrencySchema = getContract.CurrencySchema;
exports.CurrencyValueSchema = getContract.CurrencyValueSchema;
exports.CustomContractDeploy = getContract.CustomContractDeploy;
exports.CustomContractInput = getContract.CustomContractInput;
exports.CustomContractOutput = getContract.CustomContractOutput;
exports.CustomContractSchema = getContract.CustomContractSchema;
exports.DEFAULT_IPFS_GATEWAY = getContract.DEFAULT_IPFS_GATEWAY;
exports.DelayedReveal = getContract.DelayedReveal;
exports.DropClaimConditions = getContract.DropClaimConditions;
exports.DropErc1155ClaimConditions = getContract.DropErc1155ClaimConditions;
exports.DropErc1155History = getContract.DropErc1155History;
exports.DuplicateFileNameError = getContract.DuplicateFileNameError;
exports.DuplicateLeafsError = getContract.DuplicateLeafsError;
exports.EditionDropInitializer = getContract.EditionDropInitializer;
exports.EditionInitializer = getContract.EditionInitializer;
exports.EditionMetadataInputOrUriSchema = getContract.EditionMetadataInputOrUriSchema;
exports.EditionMetadataInputSchema = getContract.EditionMetadataInputSchema;
exports.EditionMetadataOutputSchema = getContract.EditionMetadataOutputSchema;
exports.EditionMetadataWithOwnerOutputSchema = getContract.EditionMetadataWithOwnerOutputSchema;
exports.EndDateSchema = getContract.EndDateSchema;
exports.Erc1155 = getContract.Erc1155;
exports.Erc1155BatchMintable = getContract.Erc1155BatchMintable;
exports.Erc1155Burnable = getContract.Erc1155Burnable;
exports.Erc1155Enumerable = getContract.Erc1155Enumerable;
exports.Erc1155LazyMintable = getContract.Erc1155LazyMintable;
exports.Erc1155Mintable = getContract.Erc1155Mintable;
exports.Erc1155SignatureMintable = getContract.Erc1155SignatureMintable;
exports.Erc20 = getContract.Erc20;
exports.Erc20BatchMintable = getContract.Erc20BatchMintable;
exports.Erc20Burnable = getContract.Erc20Burnable;
exports.Erc20Mintable = getContract.Erc20Mintable;
exports.Erc20SignatureMintable = getContract.Erc20SignatureMintable;
exports.Erc721 = getContract.Erc721;
exports.Erc721BatchMintable = getContract.Erc721BatchMintable;
exports.Erc721Burnable = getContract.Erc721Burnable;
exports.Erc721ClaimableWithConditions = getContract.Erc721ClaimableWithConditions;
exports.Erc721Enumerable = getContract.Erc721Enumerable;
exports.Erc721LazyMintable = getContract.Erc721LazyMintable;
exports.Erc721Mintable = getContract.Erc721Mintable;
exports.Erc721Supply = getContract.Erc721Supply;
exports.Erc721WithQuantitySignatureMintable = getContract.Erc721WithQuantitySignatureMintable;
Object.defineProperty(exports, 'EventType', {
  enumerable: true,
  get: function () { return getContract.EventType; }
});
exports.ExtensionNotImplementedError = getContract.ExtensionNotImplementedError;
exports.ExtraPublishMetadataSchemaInput = getContract.ExtraPublishMetadataSchemaInput;
exports.ExtraPublishMetadataSchemaOutput = getContract.ExtraPublishMetadataSchemaOutput;
exports.FactoryDeploymentSchema = getContract.FactoryDeploymentSchema;
exports.FetchError = getContract.FetchError;
exports.FileNameMissingError = getContract.FileNameMissingError;
exports.FullPublishMetadataSchemaInput = getContract.FullPublishMetadataSchemaInput;
exports.FullPublishMetadataSchemaOutput = getContract.FullPublishMetadataSchemaOutput;
exports.FunctionDeprecatedError = getContract.FunctionDeprecatedError;
exports.GasCostEstimator = getContract.GasCostEstimator;
exports.GenericRequest = getContract.GenericRequest;
exports.InterfaceId_IERC1155 = getContract.InterfaceId_IERC1155;
exports.InterfaceId_IERC721 = getContract.InterfaceId_IERC721;
exports.InvalidAddressError = getContract.InvalidAddressError;
exports.LINK_TOKEN_ADDRESS = getContract.LINK_TOKEN_ADDRESS;
exports.LOCAL_NODE_PKEY = getContract.LOCAL_NODE_PKEY;
exports.ListingNotFoundError = getContract.ListingNotFoundError;
Object.defineProperty(exports, 'ListingType', {
  enumerable: true,
  get: function () { return getContract.ListingType; }
});
exports.MarketplaceAuction = getContract.MarketplaceAuction;
exports.MarketplaceDirect = getContract.MarketplaceDirect;
exports.MarketplaceInitializer = getContract.MarketplaceInitializer;
exports.MarketplaceV3DirectListings = getContract.MarketplaceV3DirectListings;
exports.MarketplaceV3EnglishAuctions = getContract.MarketplaceV3EnglishAuctions;
exports.MarketplaceV3Initializer = getContract.MarketplaceV3Initializer;
exports.MarketplaceV3Offers = getContract.MarketplaceV3Offers;
exports.MerkleSchema = getContract.MerkleSchema;
exports.MintRequest1155 = getContract.MintRequest1155;
exports.MintRequest20 = getContract.MintRequest20;
exports.MintRequest721 = getContract.MintRequest721;
exports.MintRequest721withQuantity = getContract.MintRequest721withQuantity;
exports.MissingOwnerRoleError = getContract.MissingOwnerRoleError;
exports.MissingRoleError = getContract.MissingRoleError;
exports.MultiwrapInitializer = getContract.MultiwrapInitializer;
exports.NATIVE_TOKENS = getContract.NATIVE_TOKENS;
exports.NATIVE_TOKEN_ADDRESS = getContract.NATIVE_TOKEN_ADDRESS;
exports.NFTCollectionInitializer = getContract.NFTCollectionInitializer;
exports.NFTDropInitializer = getContract.NFTDropInitializer;
exports.NotEnoughTokensError = getContract.NotEnoughTokensError;
exports.NotFoundError = getContract.NotFoundError;
exports.OZ_DEFENDER_FORWARDER_ADDRESS = getContract.OZ_DEFENDER_FORWARDER_ADDRESS;
exports.OptionalPropertiesInput = getContract.OptionalPropertiesInput;
exports.PAPER_API_URL = getContract.PAPER_API_URL;
exports.PREBUILT_CONTRACTS_APPURI_MAP = getContract.PREBUILT_CONTRACTS_APPURI_MAP;
exports.PREBUILT_CONTRACTS_MAP = getContract.PREBUILT_CONTRACTS_MAP;
exports.PackInitializer = getContract.PackInitializer;
exports.PaperCheckout = getContract.PaperCheckout;
exports.PartialClaimConditionInputSchema = getContract.PartialClaimConditionInputSchema;
exports.PreDeployMetadata = getContract.PreDeployMetadata;
exports.PreDeployMetadataFetchedSchema = getContract.PreDeployMetadataFetchedSchema;
exports.ProfileSchemaInput = getContract.ProfileSchemaInput;
exports.ProfileSchemaOutput = getContract.ProfileSchemaOutput;
Object.defineProperty(exports, 'ProposalState', {
  enumerable: true,
  get: function () { return getContract.ProposalState; }
});
exports.PublishedContractSchema = getContract.PublishedContractSchema;
exports.QuantityAboveLimitError = getContract.QuantityAboveLimitError;
exports.RawDateSchema = getContract.RawDateSchema;
exports.RestrictedTransferError = getContract.RestrictedTransferError;
exports.SUPPORTED_CHAIN_IDS = getContract.SUPPORTED_CHAIN_IDS;
exports.Signature1155PayloadInput = getContract.Signature1155PayloadInput;
exports.Signature1155PayloadInputWithTokenId = getContract.Signature1155PayloadInputWithTokenId;
exports.Signature1155PayloadOutput = getContract.Signature1155PayloadOutput;
exports.Signature20PayloadInput = getContract.Signature20PayloadInput;
exports.Signature20PayloadOutput = getContract.Signature20PayloadOutput;
exports.Signature721PayloadInput = getContract.Signature721PayloadInput;
exports.Signature721PayloadOutput = getContract.Signature721PayloadOutput;
exports.Signature721WithQuantityInput = getContract.Signature721WithQuantityInput;
exports.Signature721WithQuantityOutput = getContract.Signature721WithQuantityOutput;
exports.SignatureDropInitializer = getContract.SignatureDropInitializer;
exports.SnapshotEntryInput = getContract.SnapshotEntryInput;
exports.SnapshotEntryWithProofSchema = getContract.SnapshotEntryWithProofSchema;
exports.SnapshotInfoSchema = getContract.SnapshotInfoSchema;
exports.SnapshotInputSchema = getContract.SnapshotInputSchema;
exports.SnapshotSchema = getContract.SnapshotSchema;
exports.SplitInitializer = getContract.SplitInitializer;
exports.StandardErc1155 = getContract.StandardErc1155;
exports.StandardErc20 = getContract.StandardErc20;
exports.StandardErc721 = getContract.StandardErc721;
exports.StartDateSchema = getContract.StartDateSchema;
Object.defineProperty(exports, 'Status', {
  enumerable: true,
  get: function () { return getContract.Status; }
});
exports.ThirdwebSDK = getContract.ThirdwebSDK;
exports.TokenDropInitializer = getContract.TokenDropInitializer;
exports.TokenERC20History = getContract.TokenERC20History;
exports.TokenInitializer = getContract.TokenInitializer;
exports.TokenMintInputSchema = getContract.TokenMintInputSchema;
exports.Transaction = getContract.Transaction;
exports.TransactionError = getContract.TransactionError;
exports.UploadError = getContract.UploadError;
exports.UserWallet = getContract.UserWallet;
exports.VoteInitializer = getContract.VoteInitializer;
Object.defineProperty(exports, 'VoteType', {
  enumerable: true,
  get: function () { return getContract.VoteType; }
});
exports.WrongListingTypeError = getContract.WrongListingTypeError;
exports.assertEnabled = getContract.assertEnabled;
exports.buildDefaultMap = getContract.buildDefaultMap;
exports.convertToReadableQuantity = getContract.convertToReadableQuantity;
exports.createCheckoutLinkIntent = getContract.createCheckoutLinkIntent;
exports.createSnapshot = getContract.createSnapshot;
exports.detectContractFeature = getContract.detectContractFeature;
exports.detectFeatures = getContract.detectFeatures;
exports.extractConstructorParams = getContract.extractConstructorParams;
exports.extractConstructorParamsFromAbi = getContract.extractConstructorParamsFromAbi;
exports.extractEventsFromAbi = getContract.extractEventsFromAbi;
exports.extractFunctionParamsFromAbi = getContract.extractFunctionParamsFromAbi;
exports.extractFunctions = getContract.extractFunctions;
exports.extractFunctionsFromAbi = getContract.extractFunctionsFromAbi;
exports.extractIPFSHashFromBytecode = getContract.extractIPFSHashFromBytecode;
exports.extractMinimalProxyImplementationAddress = getContract.extractMinimalProxyImplementationAddress;
exports.fetchAbiFromAddress = getContract.fetchAbiFromAddress;
exports.fetchContractMetadata = getContract.fetchContractMetadata;
exports.fetchContractMetadataFromAddress = getContract.fetchContractMetadataFromAddress;
exports.fetchCurrencyMetadata = getContract.fetchCurrencyMetadata;
exports.fetchCurrencyValue = getContract.fetchCurrencyValue;
exports.fetchExtendedReleaseMetadata = getContract.fetchExtendedReleaseMetadata;
exports.fetchPreDeployMetadata = getContract.fetchPreDeployMetadata;
exports.fetchRawPredeployMetadata = getContract.fetchRawPredeployMetadata;
exports.fetchRegisteredCheckoutId = getContract.fetchRegisteredCheckoutId;
exports.fetchSnapshotEntryForAddress = getContract.fetchSnapshotEntryForAddress;
exports.fetchSourceFilesFromMetadata = getContract.fetchSourceFilesFromMetadata;
exports.getAllDetectedFeatureNames = getContract.getAllDetectedFeatureNames;
exports.getAllDetectedFeatures = getContract.getAllDetectedFeatures;
exports.getApprovedImplementation = getContract.getApprovedImplementation;
exports.getChainIdFromNetwork = getContract.getChainIdFromNetwork;
exports.getChainProvider = getContract.getChainProvider;
exports.getContract = getContract.getContract;
exports.getContractAddressByChainId = getContract.getContractAddressByChainId;
exports.getContractFromAbi = getContract.getContractFromAbi;
exports.getContractName = getContract.getContractName;
exports.getContractPublisherAddress = getContract.getContractPublisherAddress;
exports.getContractTypeForRemoteName = getContract.getContractTypeForRemoteName;
exports.getDefaultTrustedForwarders = getContract.getDefaultTrustedForwarders;
exports.getMultichainRegistryAddress = getContract.getMultichainRegistryAddress;
exports.getNativeTokenByChainId = getContract.getNativeTokenByChainId;
exports.getProviderFromRpcUrl = getContract.getProviderFromRpcUrl;
exports.getRoleHash = getContract.getRoleHash;
exports.getSupportedChains = getContract.getSupportedChains;
exports.hasFunction = getContract.hasFunction;
exports.hasMatchingAbi = getContract.hasMatchingAbi;
exports.includesErrorMessage = getContract.includesErrorMessage;
exports.isChainConfig = getContract.isChainConfig;
exports.isDowngradeVersion = getContract.isDowngradeVersion;
exports.isFeatureEnabled = getContract.isFeatureEnabled;
exports.isIncrementalVersion = getContract.isIncrementalVersion;
exports.isRpcUrl = getContract.isRpcUrl;
exports.matchesPrebuiltAbi = getContract.matchesPrebuiltAbi;
exports.normalizePriceValue = getContract.normalizePriceValue;
exports.parseChainIdToPaperChain = getContract.parseChainIdToPaperChain;
exports.parseRevertReason = getContract.parseRevertReason;
exports.resolveContractUriFromAddress = getContract.resolveContractUriFromAddress;
exports.setSupportedChains = getContract.setSupportedChains;
exports.toSemver = getContract.toSemver;
