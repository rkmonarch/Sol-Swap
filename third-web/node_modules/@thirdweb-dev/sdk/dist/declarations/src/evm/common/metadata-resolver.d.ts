import { Abi, PublishedMetadata, ContractSource } from "../schema";
import { ThirdwebStorage } from "@thirdweb-dev/storage";
import { providers } from "ethers";
/**
 * @internal
 * @param address
 * @param provider
 * @param storage
 */
export declare function fetchContractMetadataFromAddress(address: string, provider: providers.Provider, storage: ThirdwebStorage): Promise<{
    name: string;
    metadata: Record<string, any>;
    abi: {
        [x: string]: any;
        type: string;
        name: string;
        inputs: {
            [x: string]: any;
            stateMutability?: string | undefined;
            components?: {
                [x: string]: any;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
            name: string;
        }[];
        outputs: {
            [x: string]: any;
            stateMutability?: string | undefined;
            components?: {
                [x: string]: any;
                type: string;
                name: string;
            }[] | undefined;
            type: string;
            name: string;
        }[];
    }[];
    info: {
        title?: string | undefined;
        author?: string | undefined;
        details?: string | undefined;
        notice?: string | undefined;
    };
    licenses: string[];
}>;
/**
 * @internal
 * @param address
 * @param provider
 * @param storage
 * @returns
 */
export declare function fetchAbiFromAddress(address: string, provider: providers.Provider, storage: ThirdwebStorage): Promise<Abi | undefined>;
/**
 * @internal
 * @param compilerMetadataUri
 * @param storage
 */
export declare function fetchContractMetadata(compilerMetadataUri: string, storage: ThirdwebStorage): Promise<PublishedMetadata>;
/**
 * @internal
 * @param publishedMetadata
 * @param storage
 */
export declare function fetchSourceFilesFromMetadata(publishedMetadata: PublishedMetadata, storage: ThirdwebStorage): Promise<ContractSource[]>;
//# sourceMappingURL=metadata-resolver.d.ts.map