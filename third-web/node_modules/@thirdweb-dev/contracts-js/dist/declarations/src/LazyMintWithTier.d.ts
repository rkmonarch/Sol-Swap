import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
export declare namespace LazyMintWithTier {
    type TokenRangeStruct = {
        startIdInclusive: BigNumberish;
        endIdNonInclusive: BigNumberish;
    };
    type TokenRangeStructOutput = [BigNumber, BigNumber] & {
        startIdInclusive: BigNumber;
        endIdNonInclusive: BigNumber;
    };
    type TierMetadataStruct = {
        tier: string;
        ranges: LazyMintWithTier.TokenRangeStruct[];
        baseURIs: string[];
    };
    type TierMetadataStructOutput = [
        string,
        LazyMintWithTier.TokenRangeStructOutput[],
        string[]
    ] & {
        tier: string;
        ranges: LazyMintWithTier.TokenRangeStructOutput[];
        baseURIs: string[];
    };
}
export interface LazyMintWithTierInterface extends utils.Interface {
    functions: {
        "getBaseURICount()": FunctionFragment;
        "getBatchIdAtIndex(uint256)": FunctionFragment;
        "getMetadataForAllTiers()": FunctionFragment;
        "lazyMint(uint256,string,string,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getBaseURICount" | "getBatchIdAtIndex" | "getMetadataForAllTiers" | "lazyMint"): FunctionFragment;
    encodeFunctionData(functionFragment: "getBaseURICount", values?: undefined): string;
    encodeFunctionData(functionFragment: "getBatchIdAtIndex", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getMetadataForAllTiers", values?: undefined): string;
    encodeFunctionData(functionFragment: "lazyMint", values: [BigNumberish, string, string, BytesLike]): string;
    decodeFunctionResult(functionFragment: "getBaseURICount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBatchIdAtIndex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMetadataForAllTiers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lazyMint", data: BytesLike): Result;
    events: {
        "TokensLazyMinted(string,uint256,uint256,string,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "TokensLazyMinted"): EventFragment;
}
export interface TokensLazyMintedEventObject {
    tier: string;
    startTokenId: BigNumber;
    endTokenId: BigNumber;
    baseURI: string;
    encryptedBaseURI: string;
}
export type TokensLazyMintedEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber,
    string,
    string
], TokensLazyMintedEventObject>;
export type TokensLazyMintedEventFilter = TypedEventFilter<TokensLazyMintedEvent>;
export interface LazyMintWithTier extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: LazyMintWithTierInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getBaseURICount(overrides?: CallOverrides): Promise<[BigNumber]>;
        getBatchIdAtIndex(_index: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
        getMetadataForAllTiers(overrides?: CallOverrides): Promise<[
            LazyMintWithTier.TierMetadataStructOutput[]
        ] & {
            metadataForAllTiers: LazyMintWithTier.TierMetadataStructOutput[];
        }>;
        lazyMint(_amount: BigNumberish, _baseURIForTokens: string, _tier: string, _data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    getBaseURICount(overrides?: CallOverrides): Promise<BigNumber>;
    getBatchIdAtIndex(_index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    getMetadataForAllTiers(overrides?: CallOverrides): Promise<LazyMintWithTier.TierMetadataStructOutput[]>;
    lazyMint(_amount: BigNumberish, _baseURIForTokens: string, _tier: string, _data: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        getBaseURICount(overrides?: CallOverrides): Promise<BigNumber>;
        getBatchIdAtIndex(_index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getMetadataForAllTiers(overrides?: CallOverrides): Promise<LazyMintWithTier.TierMetadataStructOutput[]>;
        lazyMint(_amount: BigNumberish, _baseURIForTokens: string, _tier: string, _data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {
        "TokensLazyMinted(string,uint256,uint256,string,bytes)"(tier?: string | null, startTokenId?: BigNumberish | null, endTokenId?: null, baseURI?: null, encryptedBaseURI?: null): TokensLazyMintedEventFilter;
        TokensLazyMinted(tier?: string | null, startTokenId?: BigNumberish | null, endTokenId?: null, baseURI?: null, encryptedBaseURI?: null): TokensLazyMintedEventFilter;
    };
    estimateGas: {
        getBaseURICount(overrides?: CallOverrides): Promise<BigNumber>;
        getBatchIdAtIndex(_index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getMetadataForAllTiers(overrides?: CallOverrides): Promise<BigNumber>;
        lazyMint(_amount: BigNumberish, _baseURIForTokens: string, _tier: string, _data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        getBaseURICount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getBatchIdAtIndex(_index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getMetadataForAllTiers(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lazyMint(_amount: BigNumberish, _baseURIForTokens: string, _tier: string, _data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=LazyMintWithTier.d.ts.map